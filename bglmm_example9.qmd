---
title: "Bayesian GLMM Part9"
author: "Murray Logan"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    ## Format
    theme: [default, ../resources/ws-style.scss]
    css: ../resources/ws_style.css
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    page-layout: full
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 4
    fig-height: 4
    fig-dpi: 72
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    code-copy: true
    highlight-style: atom-one
    ## Execution
    execute:
      echo: true
      cache: true
    ## Rendering
    embed-resources: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
output_dir: "docs"
documentclass: article
fontsize: 12pt
mainfont: Arial
mathfont: LiberationMono
monofont: DejaVu Sans Mono
classoption: a4paper
bibliography: ../resources/references.bib
---

```{r}
#| label: setup
#| include: false
#| cache: false

knitr::opts_chunk$set(cache.lazy = FALSE,
                      tidy = "styler")
options(tinytex.engine = "xelatex")
```


# Preparations

Load the necessary libraries

```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(car)       #for regression diagnostics
library(broom)     #for tidy output
library(ggfortify) #for model diagnostics
library(knitr)     #for kable
library(effects)   #for partial effects plots
library(emmeans)   #for estimating marginal means
library(MASS)      #for glm.nb
library(tidyverse) #for data wrangling
library(brms)
library(tidybayes)
library(bayesplot)
library(broom.mixed)
library(rstan)
library(patchwork)
library(modelsummary)
library(DHARMa)
source('helperFunctions.R')
```


<!-- START_PRIVATE-->
# Original data

```{r readDataP, results='markdown', eval=TRUE}
hughes <- read_csv('../data/hughes_full.csv', trim_ws=TRUE)
glimpse(hughes)
```

| Bleaching Score | 2016 Equates to  | 2017 Equates to  |
|-----------------+------------------+------------------|
|               0 | No bleaching     | No bleaching     |
|               1 | 0-10% bleaching  | 0-10% bleaching  |
|               2 | 10-30% bleaching | 10-30% bleaching |
|               3 | 30-60% bleaching | 30-60% bleaching |
|               4 | > 60% bleaching  | 60-80% bleaching |
|               5 | -                | > 80% bleaching  |

# Data processing

- Make a categorical version of Year
- Combine Scores 4 and 5 into a single Score of 4 to be consistent across years
- Make Score an ordered categorical variable
- Generate a numeric version of categorical Score (as required for the `ocat` family.  Note this must be a 1 indexed numeric.
- Relevel Sector such that it is in the order North, Central, South
- Ensure that there is a categorical version of Reef
- Generate a numeric version of the categorical Reef 


```{r processDataP, results='markdown', eval=TRUE}
hughes <- hughes |>
    mutate(fYear=factor(Year),
           Score=ifelse(Score==5,4,Score),
           oScore = factor(Score, ordered=TRUE),
           nScore = as.numeric(factor(Score, ordered=TRUE)),
           SectorThree=factor(SectorThree, levels=c('North','Central','South')),
           fReef=factor(ReefID),
           nReef=as.numeric(fReef))
# now make a version that is just 2016
hughes <- hughes |> filter(fYear==2016) |>
    dplyr::select(REEF=ReefID, HABITAT=Habitat, SECTOR=SectorThree, SCORE=Score)
write_csv(hughes, file='../data/hughes.csv')
## hughes.colors = c('#FFFFFF', rev(heat.colors(length(levels(hughes$oScore))))[-1])
```

<!-- END_PRIVATE-->

# Scenario

Once it is established that mass coral bleaching is occurring on the
Great Barrier Reef (GBR), a monitoring team is mobilised in both the
air and water in order to document the scale and extent of the
bleaching. To better understand the causes and consequences of
bleaching, one marine ecologist (lets call him Terry) was interested
in investigating differences in bleaching extent across different reef
habitats. To do so, aerial surveys were partitioned into four habitats
(C - crest, F - flank, L - lower, U - upper).

Bleaching is scored categorically according to the following scale.

| Bleaching Score | 2016 Equates to  |
|-----------------+------------------|
|               0 | No bleaching     |
|               1 | 0-10% bleaching  |
|               2 | 10-30% bleaching |
|               3 | 30-60% bleaching |
|               4 | > 60% bleaching  |

The GBR is very large and the extent of coral bleaching is not uniform
throughout the reef. Hence, Terry wanted to see if the habitat
patterns were similar throughout the GBR or whether they were
dependent on the overall bleaching severity.

# Read in the data

2016 data only

```{r readData, results='markdown', eval=TRUE}
hughes = read_csv('../data/hughes.csv', trim_ws=TRUE)
glimpse(hughes)
```

| REEF   | HABITAT | SECTOR | SCORE |
|--------|---------|--------|-------|
| 09-357 | C       | North  | 4     |
| 09-357 | F       | North  | 4     |
| 09-357 | U       | North  | 3     |
|        |         |        |       |

<!-- START_PRIVATE-->
::: {.panel-tabset}

## glimpse
```{r}
#| label: examinData
glimpse(hughes)
```

## head
```{r}
## Explore the first 6 rows of the data
head(hughes)
```

## str
```{r}
str(hughes)
```

## Easystats (datawizard)
```{r}
hughes |> datawizard::data_codebook()
```

## Skim (modelsummary)
```{r}
hughes |> modelsummary::datasummary_skim(by = "HABITAT")
```

:::
<!-- END_PRIVATE-->

# Data preparation

<!-- START_PRIVATE-->

- ensure score is ordinal
- declare categorical variables as factors - and relevel sector
- declare random effects as factors

```{r processData, results='markdown', eval=TRUE, mhidden=TRUE}
hughes <- hughes |>
    mutate(oSCORE = factor(SCORE, ordered = TRUE),
           HABITAT = factor(HABITAT),
           SECTOR = factor(SECTOR, levels = c("North", "Central", "South")),
           REEF = factor(REEF))
## hughes.colors = c("#FFFFFF", rev(heat.colors(length(levels(hughes$oSCORE))))[-1])
```
<!-- END_PRIVATE-->

# Exploratory Data Analysis

Proportional (cumulative link) odds-ratio models are useful when the latent
(unmeasured) response is recorded on a ordinal (ordered categorical) scale.
When this is the case, we can calculate the probability of a that an observed
ordinal score ($y$) is less than or equal to any given level ($i$: category) given a set of
covariates ($\boldsymbol{X}$) according to the following:

$$ Pr(y\le i|\boldsymbol{X}) =
\frac{1}{1+e^{-(\theta_i - \boldsymbol{\beta}.\boldsymbol{X})}}\\ $$

where $y$ is the observed categorical response, $\boldsymbol{X}$ is a ($n \times
p$) effects model matrix, $\boldsymbol{\beta}$ are the $p$ effects parameters
and $\theta_i$ are the $K-1$ category thresholds


<!-- START_PRIVATE-->
::: {.panel-tabset}

## Dot plots
- count the number of samples in each bleaching category per sector per habitat
- express this number as proportions
- reverse the order of the score levels

```{r EDA2, results='markdown', eval=TRUE, fig.width=10, fig.height=10, mhidden=TRUE}
# Scatterplot
hughes |>
    ggplot(aes(y = oSCORE, x = HABITAT)) +
    geom_point(position = position_jitter()) +
    facet_wrap(~SECTOR)
```

## Line plot 
too messy to make much of this...
```{r EDA2a, results='markdown', eval=TRUE, fig.width=10, fig.height=10, mhidden=TRUE}
hughes |>
    group_by(SECTOR, REEF, HABITAT) |>
    summarise(SCORE = mean(SCORE)) |>
    ungroup() |>
    ggplot(aes(y = SCORE, x = as.numeric(HABITAT), group = REEF)) +
    geom_blank(aes(x = HABITAT)) +
    geom_line() +
    facet_grid(~SECTOR)
```
## Stacked bar

```{r EDA2b, results='markdown', eval=TRUE, fig.width=10, fig.height=10, mhidden=TRUE}
hughes |>
    group_by(SECTOR, HABITAT, oSCORE) |>
    summarise(n = n()) |>
    ungroup() |>
    group_by(SECTOR, HABITAT) |>
    mutate(prop = n/sum(n)) |>
    mutate(oSCORE = factor(oSCORE, levels = rev(levels(oSCORE)))) ->
    hughes.sum
    
## hughes.sum <- hughes |>
##     count(SECTOR,HABITAT,oSCORE) |>
##     group_by(SECTOR, HABITAT) |>
##     mutate(prop=prop.table(n),
##            oSCORE=factor(oSCORE, levels=rev(levels(oSCORE))))

hughes.sum |> head()

ggplot(data=hughes.sum, aes(y=prop, x=HABITAT)) +
    geom_bar(stat='Identity', aes(fill=oSCORE), color='black') +
    facet_grid(~SECTOR) +
    ## scale_fill_manual('Bleaching score', values=rev(hughes.colors) ) +
    scale_fill_manual('Bleaching score', values=c(heat.colors(5)[-5], '#FFFFFF') ) +
    scale_y_continuous('Proportion of Reef', expand=c(0,0))+
    theme_bw() + 
    theme(panel.spacing.y=unit(10,'pt'))
```
:::
<!-- END_PRIVATE-->


# Fit the model

::: {.panel-tabset}

<!-- START_PRIVATE-->
## brms 
:::: {.panel-tabset}

### Using default priors

In `brms`, the default priors are designed to be weakly informative.  They are
chosen to provide moderate regularisation (to help prevent over fitting) and
help stabilise the computations.

Unlike `rstanarm`, `brms` models must be compiled before they start sampling.
For most models, the compilation of the stan code takes around 45 seconds.

```{r fitModel2a, results='markdown', eval=TRUE, cache=TRUE, paged.print=FALSE, tidy.opts = list(width.cutoff = 80)}
hughes.form <- bf(oSCORE ~ HABITAT*SECTOR + (1|REEF),
  family = cumulative(link = "logit", threshold = "flexible")
)
options(width=150)
hughes.form %>% get_prior(data = hughes)
options(width=80)
```

### Defining priors

The following link provides some guidance about defining priors.
[https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations]

When defining our own priors, we typically do not want them to be scaled.

If we wanted to define our own priors that were less vague, yet still not likely
to bias the outcomes, we could try the following priors (mainly plucked out of
thin air):

- $\beta_0$: normal centred at 84 with a standard deviation of 5.9
  - mean of 84: since `median(starling$MASS)`
  - sd of 5.9: since `mad(starling$MASS)`
- $\beta_1$: normal centred at 0 with a standard deviation of 13
  - sd of 13: since `sd(starling$MASS) / apply(model.matrix(~MONTH*SITUATION, starling)[, -1], 2, sd)`
- $\beta_{2-4}$: normal centred at 0 with a standard deviation of 15
  - sd of 15: since `sd(starling$MASS) / apply(model.matrix(~MONTH*SITUATION, starling)[, -1], 2, sd)`
- $\beta_{5-7}$: normal centred at 0 with a standard deviation of 20
  - sd of 20: since `sd(starling$MASS) / apply(model.matrix(~MONTH*SITUATION, starling)[, -1], 2, sd)`
- $\sigma$: gamma with shape parameters 6.5 and 1
  - 6.5: since `sd(starling$MASS)`
- $\sigma_j$: half-cauchy with parameters 0 and 2.5.
  - 2.: since `sqrt(sd(starling$MASS))`
- $\Sigma$: decov with:
  - regularisation: the exponent for a LKJ prior on the correlation matrix.  A
    value of 1 (default) implies a joint uniform prior
  - concentration: the concentration parameter for a symmetric Dirichlet
    distribution.  A value of 1 (default) implies a joint uniform distribution
  - shape and scale: the shape and scale parameters for a gamma prior on the
    scale and scale parameters of the
    decov prior.  A value of 1 for both (default) simplifies the gamma prior to
    a unit-exponential distribution.

Note, for hierarchical models, the model will tend to want to have a
large $sigma$ in order to fit the data better.  It is a good idea to
__regularise__ this tendency by applying a prior that has most mass
around zero.  Suitable candidates include:

- half-t: as the degrees of freedom approach infinity, this will approach a half-normal 
- half-cauchy: this is essentially a half-t with 1 degree of freedom
- exponential

I will also overlay the raw data for comparison.

```{r fitModel2h, results='markdown', eval=TRUE, cache=FALSE}
```

```{r fitModel2h1, results='markdown', eval=TRUE, cache=TRUE}
priors <- prior(normal(0, 1), class = 'Intercept') +
    prior(normal(0, 1), class = 'b') +
    prior(student_t(3, 0, 1), class = 'sd') 
hughes.form <- bf(oSCORE ~ HABITAT*SECTOR + (1|REEF),
  family = cumulative(link = "logit", threshold = "flexible")
)
hughes.brm2 <- brm(hughes.form, 
                  data = hughes,
                  prior = priors,
                  sample_prior = 'only',
                  iter = 5000,
                  warmup = 1000,
                  chains = 3, cores = 3,
                  thin = 5,
                  refresh = 0,
                  backend = "cmdstanr"
                  )
```

```{r partialPlot2h1a, results='markdown', eval=TRUE, fig.width=8, fig.height=5}
## hughes.brm2 %>%
##     ggpredict(~HABITAT*SECTOR) |>
##     plot(show_data = TRUE)
hughes.brm2 |>
  conditional_effects(categorical = TRUE) |>
  plot(points = TRUE)

hughes.brm2 |>
  conditional_effects("HABITAT",
    conditions = make_conditions(hughes.brm2, "SECTOR"),
    categorical = TRUE
)
```

The above seem sufficiently wide whilst at the same time not providing any encouragement for the sampler
to wander off into very unsupported areas.

```{r fitModel2h1b, results='markdown', eval=TRUE, cache=TRUE}
hughes.brm3 <- update(hughes.brm2,  
                       sample_prior = 'yes',
                       control = list(adapt_delta = 0.99),
                       refresh = 100)
save(hughes.brm3, file = '../ws/testing/hughes.brm3')
```

```{r partialPlot2h1b, results='markdown', eval=TRUE, fig.width=8, fig.height=5}
hughes.brm3 |> 
    conditional_effects("HABITAT", categorical = TRUE) |> 
    plot(points = TRUE)
hughes.brm3 |> 
    conditional_effects("SECTOR", categorical = TRUE) |> 
    plot(points = TRUE)

hughes.brm3 |>
  conditional_effects("HABITAT",
    conditions = make_conditions(hughes.brm3, "SECTOR"),
    categorical = TRUE
)
```

### Plotting prior and posterior

```{r posterior2h2, results='markdown', eval=TRUE}
hughes.brm3 %>% get_variables()
hughes.brm3 %>% hypothesis('HABITATF=0') %>% plot
hughes.brm3 %>% hypothesis('SECTORCentral=0') %>% plot
```

```{r posterior2h2a, results='markdown', eval=TRUE, fig.width = 7, fig.height = 5}
#hughes.brm3 %>% SUYR_prior_and_posterior()
```


::::

<!-- END_PRIVATE-->

:::

# MCMC sampling diagnostics

::: {.panel-tabset}

<!-- START_PRIVATE-->

In addition to the regular model diagnostics checking, for Bayesian analyses, it
is also necessary to explore the MCMC sampling diagnostics to be sure that the
chains are well mixed and have converged on a stable posterior.

There are a wide variety of tests that range from the big picture, overall chain
characteristics to the very specific detailed tests that allow the experienced
modeller to drill down to the very fine details of the chain behaviour.
Furthermore, there are a multitude of packages and approaches for exploring
these diagnostics.

## brms 

:::: {.panel-tabset}

### bayesplot

The `bayesplot` package offers a range of MCMC diagnostics as well as Posterior
Probability Checks (PPC), all of which have a convenient `plot()` interface.
Lets start with the MCMC diagnostics.

<details><summary>See list of available diagnostics by name</summary>
```{r modelValidation2a, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
available_mcmc()
```
</details>

Of these, we will focus on:

- trace: this plots the estimates of each parameter over the post-warmup
  length of each MCMC chain.  Each chain is plotted in a different shade of
  blue, with each parameter in its own facet.  Ideally, each **trace** should
  just look like noise without any discernible drift and each of the traces for
  a specific parameter should look the same (i.e, should not be displaced above
  or below any other trace for that parameter).

```{r modelValidation2b, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
pars <- hughes.brm3 %>% get_variables()
pars <- hughes.brm3 |>
    get_variables() |>
    str_subset("^b_.*|[sS]igma|^sd.*")
pars
hughes.brm3 |> mcmc_plot(type='trace', variable = pars)
```
  
   The chains appear well mixed and very similar
   
- acf_bar (autocorrelation function): plots the autocorrelation between successive
  MCMC sample lags for each parameter and each chain
  
```{r modelValidation2c, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3 |> mcmc_plot(type='acf_bar', variable = pars)
```

   There is no evidence of auto-correlation in the MCMC samples

- rhat_hist: Rhat is a **scale reduction factor** measure of convergence between the chains.  The closer the
  values are to 1, the more the chains have converged.  Values greater than 1.05
  indicate a lack of convergence.  There will be an Rhat value for each
  parameter estimated.

```{r modelValidation2d, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3 |> mcmc_plot(type='rhat_hist')
```

  All Rhat values are below 1.05, suggesting the chains have converged.
  
- neff_hist (number of effective samples): the ratio of the number of effective
  samples (those not rejected by the sampler) to the number of samples provides
  an indication of the effectiveness (and efficiency) of the MCMC sampler.
  Ratios that are less than 0.5 for a parameter suggest that the sampler spent
  considerable time in difficult areas of the sampling domain and rejected more
  than half of the samples (replacing them with the previous effective sample).  
  
  If the ratios are low, tightening the priors may help.
  
```{r modelValidation2e, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm2 |> mcmc_plot(type='neff_hist')
```

  Ratios all very high.

<details><summary>More diagnostics</summary>
```{r modelValidation2f, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3 |> mcmc_plot(type='combo', variable = pars)
hughes.brm3 |> mcmc_plot(type='violin', variable = pars)
```
</details>

### stan plots

The `rstan` package offers a range of MCMC diagnostics.
Lets start with the MCMC diagnostics.

Of these, we will focus on:

- stan_trace: this plots the estimates of each parameter over the post-warmup
  length of each MCMC chain. Each chain is plotted in a different colour, with
  each parameter in its own facet. Ideally, each **trace** should just look like
  noise without any discernible drift and each of the traces for a specific
  parameter should look the same (i.e, should not be displaced above or below
  any other trace for that parameter).
  
```{r modelValidation2g, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3 |> get_variables()
pars <- hughes.brm3 |>
    get_variables() |>
    str_subset("^b_.*|[sS]igma|^sd.*")
pars
hughes.brm3$fit |> 
    stan_trace(pars = pars)
```

   The chains appear well mixed and very similar
   
- stan_acf (auto-correlation function): plots the auto-correlation between successive
  MCMC sample lags for each parameter and each chain
  
```{r modelValidation2h, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3$fit |> 
    stan_ac(pars = pars)
```

   There is no evidence of auto-correlation in the MCMC samples

- stan_rhat: Rhat is a **scale reduction factor** measure of convergence between the chains.  The closer the
  values are to 1, the more the chains have converged.  Values greater than 1.05
  indicate a lack of convergence.  There will be an Rhat value for each
  parameter estimated.

```{r modelValidation2i, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3$fit |> stan_rhat() 
```

  All Rhat values are below 1.05, suggesting the chains have converged.
  
- stan_ess (number of effective samples): the ratio of the number of effective
  samples (those not rejected by the sampler) to the number of samples provides
  an indication of the effectiveness (and efficiency) of the MCMC sampler.
  Ratios that are less than 0.5 for a parameter suggest that the sampler spent
  considerable time in difficult areas of the sampling domain and rejected more
  than half of the samples (replacing them with the previous effective sample).  
  
  If the ratios are low, tightening the priors may help.
  
```{r modelValidation2j, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3$fit |> stan_ess()
```

  Ratios all very high.

```{r modelValidation2k, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3$fit |>
    stan_dens(separate_chains = TRUE, pars = pars)
```

::::

<!-- END_PRIVATE-->

:::

# Model validation 

::: {.panel-tabset}

<!-- START_PRIVATE-->
## brms
	
:::: {.panel-tabset}

### pp check
Post predictive checks provide additional diagnostics about the fit of the
model.  Specifically, they provide a comparison between predictions drawn from
the model and the observed data used to train the model.

<details><summary>See list of available diagnostics by name</summary>
```{r modelValidation5a, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
available_ppc()
```
</details>

- dens_overlay: plots the density distribution of the observed data (black line)
overlayed on top of 50 density distributions generated from draws from the model
(light blue).  Ideally, the 50 realisations should be roughly consistent with
the observed data.

```{r modelValidation5b, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3 |> pp_check(type = 'dens_overlay', nsamples = 100)
```
The model draws appear to be consistent with the observed data.

- error_scatter_avg: this plots the observed values against the average
  residuals. Similar to a residual plot, we do not want to see any patterns in
  this plot.  Note, this is not really that useful for models that involve a
  binomial response

```{r modelValidation5c, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3 %>% pp_check(type = 'error_scatter_avg')
```

This is not really interpretable

- intervals:  plots the observed data overlayed on top of posterior predictions
associated with each level of the predictor.  Ideally, the observed data should
all fall within the predictive intervals.


```{r modelValidation5e, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
hughes.brm3 %>% pp_check(group = 'REEF', type = 'intervals')
```

The `shinystan` package allows the full suite of MCMC diagnostics and posterior
predictive checks to be accessed via a web interface.

```{r modelValidation5g, results='markdown', eval=TRUE, fig.width=6, fig.height=4}
#library(shinystan)
#launch_shinystan(hughes.brm2)
```

### DHARMa residuals

DHARMa residuals provide very useful diagnostics.  Unfortunately, we cannot
directly use the `simulateResiduals()` function to generate the simulated
residuals.  However, if we are willing to calculate some of the components
yourself, we can still obtain the simulated residuals from the fitted stan model.

We need to supply:

- simulated (predicted) responses associated with each observation.
- observed values
- fitted (predicted) responses (averaged) associated with each observation


```{r modelValidation6aa, results='markdown', eval=TRUE, fig.width=8, fig.height=10}
hughes.resids <- make_brms_dharma_res(hughes.brm3, integerResponse = FALSE)
wrap_elements(~testUniformity(hughes.resids)) +
               wrap_elements(~plotResiduals(hughes.resids, form = factor(rep(1, nrow(hughes))))) +
               wrap_elements(~plotResiduals(hughes.resids, quantreg = TRUE)) +
               wrap_elements(~testDispersion(hughes.resids)) 
```

::::
<!-- END_PRIVATE-->

:::

# Model investigation 

::: {.panel-tabset}

<!-- START_PRIVATE-->

## brms 

:::: {.panel-tabset}

`brms` captures the MCMC samples from `stan` within the returned list.
There are numerous ways to retrieve and summarise these samples.  The first
three provide convenient numeric summaries from which you can draw conclusions,
the last four provide ways of obtaining the full posteriors. 

### summary

The `summary()` method generates simple summaries (mean, standard deviation as
well as 10, 50 and 90 percentiles).

```{r summariseModel2a, results='markdown', eval=TRUE, fig.width=8, fig.height=5}
hughes.brm3 %>% summary()
```

```{r summariseModel2a1, results='markdown', eval=TRUE, fig.width=8, fig.height=5, echo=FALSE}
hughes.sum <- summary(hughes.brm3)
```

### as_draws_df (posteriors)

```{r summariseModel2bm, results='markdown', eval=TRUE, fig.width=8, fig.height=5,echo=TRUE}
hughes.brm3 |> as_draws_df()
hughes.brm3 |>
    as_draws_df() |>
    exp() |>
    dplyr::select(matches("^b_Intercept.*|^b_HABITAT.*|^b_SECTOR.*")) |>
  summarise_draws(
    median,
    HDInterval::hdi,
    Pl = ~mean(.x < 1),
    Pg = ~mean(.x > 1),
    rhat,
    ess_bulk
  )
```

### $R^2$

```{r summariseModel2g, results='markdown', eval=TRUE, fig.width=8, fig.height=5}
hughes.brm3 |>
    bayes_R2(re.form = NA, summary=FALSE) |>
    median_hdci()
hughes.brm3 |>
    bayes_R2(re.form = ~(1|REEF), summary=FALSE) |>
    median_hdci()
```

::::

<!-- END_PRIVATE-->

:::




# Further investigations 

::: {.panel-tabset}

<!-- START_PRIVATE-->

## brms

:::: {.panel-tabset}

### Cellmeans

Lets start by calculating the cell means
```{r postHoc1a, results='markdown', eval=TRUE, echo=TRUE}
newdata <- with(hughes, expand.grid(
    HABITAT = levels(HABITAT),
    SECTOR = levels(SECTOR)
))
add_epred_draws(hughes.brm3, newdata = newdata, re_formula = NA) |>
  mutate(fit = as.numeric(as.character(.category)) * .epred) |>
  group_by(HABITAT, SECTOR, .draw) |>
  summarise(fit = sum(fit)) |>
  summarise_draws(
    median,
    HDInterval::hdi
  ) |> 
  arrange(SECTOR, HABITAT) 

add_epred_draws(hughes.brm3, newdata = newdata, re_formula = NA) |>
  mutate(fit = as.numeric(as.character(.category)) * .epred) |>
  group_by(HABITAT, SECTOR, .draw) |>
  summarise(fit = sum(fit)) |>
  summarise_draws(
    median,
    HDInterval::hdi
  ) |> 
  arrange(SECTOR, HABITAT) |>
  ggplot(aes(y = median, x = HABITAT)) +
    geom_hline(yintercept=1, linetype='dashed', size=0.1) +
    geom_hline(yintercept=2, linetype='dashed', size=0.1) +
    geom_hline(yintercept=3, linetype='dashed', size=0.1) +
    geom_pointrange(aes(ymin = lower, ymax = upper)) +
    facet_grid(~SECTOR) +
    scale_y_continuous('Bleaching score', breaks=(0:4), labels=0:4, limits=c(0,4),expand=c(0,0)) +
    theme_bw() +
    theme(panel.spacing.y=unit(10,'pt'))

```

### Effects

```{r postHoc1b, results='markdown', eval=TRUE, echo=TRUE, width = 10, height = 3}
add_epred_draws(hughes.brm3, newdata = newdata, re_formula = NA) |>
    mutate(fit = as.numeric(as.character(.category)) * .epred) |>
    group_by(HABITAT, SECTOR, .draw) |>
    summarise(fit = log(sum(fit))) |>
    ## compare_levels(var = fit, by = HABITAT, comparison = "pairwise") |>
    tidybayes::compare_levels(
        var = fit, by = HABITAT,
        ## comparison = emmeans_comparison("tukey", reverse = TRUE)) |>
        comparison = emmeans_comparison("revpairwise")
    ) |>
    mutate(fit = exp(fit)) |>
    group_by(SECTOR, HABITAT) |>
    summarise_draws(
        median,
        HDInterval::hdi
    ) |>
    ggplot(aes(x = median, y = HABITAT)) +
    geom_vline(xintercept = 1, linetype = "dashed") +
    geom_pointrange(aes(xmin = lower, xmax = upper)) +
    facet_grid(~SECTOR, scales = "free") +
    scale_x_continuous("Effect size (percentage change in bleaching category)",
        trans = scales::log2_trans(),
        ## breaks = seq(0.25, 2.5, by = 0.25),
        breaks = scales::trans_breaks("log10", function(x) exp(x)),
        ## breaks = scales::trans_breaks("log2", function(x) 2^x),
        ## labels = scales::trans_format("log2", function(x) x)
        ## labels = function(x) x
        labels = function(x) (x - 1) * 100
  )+
  theme_bw()

```

::::

<!-- END_PRIVATE-->
:::





<!-- START_PRIVATE-->

```{r}
#| label: temp
#| results: markup
#| eval: false
#| echo: false
#| cache: false
summary(hughes.brm3)
brms::inv_logit_scaled(-0.33)
brms::inv_logit_scaled(-1.34)

newdata <- with(hughes, expand.grid(
    HABITAT = levels(HABITAT),
    SECTOR = levels(SECTOR)
))
## Cellmeans
add_epred_draws(hughes.brm3, newdata = newdata, re_formula = NA) |>
  mutate(fit = as.numeric(as.character(.category)) * .epred) |>
  group_by(HABITAT, SECTOR, .draw) |>
  summarise(fit = sum(fit)) |>
  summarise_draws(
    median,
    HDInterval::hdi
  ) |> 
  arrange(SECTOR, HABITAT) |>
  ggplot(aes(y = median, x = HABITAT)) +
    geom_hline(yintercept=1, linetype='dashed', size=0.1) +
    geom_hline(yintercept=2, linetype='dashed', size=0.1) +
    geom_hline(yintercept=3, linetype='dashed', size=0.1) +
    geom_pointrange(aes(ymin = lower, ymax = upper)) +
    facet_grid(~SECTOR) +
    scale_y_continuous('Bleaching score', breaks=(0:4), labels=0:4, limits=c(0,4),expand=c(0,0)) +
    theme_bw() +
    theme(panel.spacing.y=unit(10,'pt'))

    ## Effects - habitats (absolute)
add_epred_draws(hughes.brm3, newdata = newdata, re_formula = NA) |>
  mutate(fit = as.numeric(as.character(.category)) * .epred) |>
  group_by(HABITAT, SECTOR, .draw) |>
  summarise(fit = sum(fit)) |>
  ## compare_levels(var = fit, by = HABITAT, comparison = "pairwise") |> 
  tidybayes::compare_levels(var = fit, by = HABITAT,
    ## comparison = emmeans_comparison("tukey", reverse = TRUE)) |> 
    comparison = emmeans_comparison("revpairwise")) |> 
  group_by(SECTOR, HABITAT) |>
  summarise_draws(
    median,
    HDInterval::hdi
  ) |> 
  ggplot(aes(x = median, y = HABITAT)) +
  geom_vline(xintercept = 0, linetype = "dashed") + 
  geom_pointrange(aes(xmin = lower, xmax = upper)) +
  facet_grid(~SECTOR) +
  scale_x_continuous('Effect size (absolute change in bleaching category)')+
  theme_bw()

## Effects - habitats (fractional change)
add_epred_draws(hughes.brm3, newdata = newdata, re_formula = NA) |>
    mutate(fit = as.numeric(as.character(.category)) * .epred) |>
    group_by(HABITAT, SECTOR, .draw) |>
    summarise(fit = log(sum(fit))) |>
    ## compare_levels(var = fit, by = HABITAT, comparison = "pairwise") |>
    tidybayes::compare_levels(
        var = fit, by = HABITAT,
        ## comparison = emmeans_comparison("tukey", reverse = TRUE)) |>
        comparison = emmeans_comparison("revpairwise")
    ) |>
    mutate(fit = exp(fit)) |>
    group_by(SECTOR, HABITAT) |>
    summarise_draws(
        median,
        HDInterval::hdi
    ) |>
    ggplot(aes(x = median, y = HABITAT)) +
    geom_vline(xintercept = 1, linetype = "dashed") +
    geom_pointrange(aes(xmin = lower, xmax = upper)) +
    facet_grid(~SECTOR, scales = "free") +
    scale_x_continuous("Effect size (percentage change in bleaching category)",
        trans = scales::log2_trans(),
        breaks = scales::trans_breaks("log2", function(x) 2^x),
        ## labels = scales::trans_format("log2", function(x) x)
        ## labels = function(x) x
        labels = function(x) (x - 1) * 100
  )+
  theme_bw()



## More manual
add_epred_draws(hughes.brm3, newdata = newdata, re_formula = NA) |>
    mutate(fit = as.numeric(as.character(.category)) * .epred) |>
    group_by(HABITAT, SECTOR, .draw) |>
    summarise(fit = sum(fit)) |>
    group_by(SECTOR, .draw) |>
  reframe(
    contrast = colnames(emmeans:::pairwise.emmc(HABITAT)),
    fit1 = t(as.vector(fit) %*% as.matrix(emmeans:::pairwise.emmc(HABITAT)))
    ) |> 
    group_by(SECTOR, contrast) |>
  summarise_draws(
    median,
    HDInterval::hdi
    )


sum(0:4 * posterior_epred(hughes.brm3, newdata = newdata, re_formula = NA)[,4,] |> colMeans())









hughes.brm3 |> emmeans(~HABITAT | SECTOR, mode = "latent")
emmeans(hughes.clmm, ~oSCORE|HABITAT|SECTOR, mode='prob')
emmeans(hughes.clmm, ~HABITAT|SECTOR)

newdata <- with(hughes, expand.grid(
    HABITAT = levels(HABITAT),
    SECTOR = levels(SECTOR),
    REEF = NA
) )
hughes.brm3 |>
  epred_draws(newdata) |>
  filter(HABITAT == "C", SECTOR == "North") |>
  dplyr::select(HABITAT, SECTOR, .draw, .epred) |> 
    ungroup() |>
  summarise(mean(.epred))
hughes.brm3 |>
    linpred_draws(newdata) |>
    filter(HABITAT == "C", SECTOR == "North") |>
    dplyr::select(HABITAT, SECTOR, .draw, .linpred) |>
    ungroup() |>
  summarise(mean(.linpred))

hughes.brm3 |>
  predicted_draws(newdata) |>
  filter(HABITAT == "C", SECTOR == "North") |>
  dplyr::select(HABITAT, SECTOR, .draw, .prediction)

newdata <- cbind(newdata, predict(hughes.brm3, newdata = newdata))
newdata
apply(sweep(newdata[, 4:8], 2, 0:4, "*"), 1, sum)
rowSums(1:5 * newdata[, 4:8])
1:5 * newdata[, 4:8]


coefs <- hughes.brm3 |>
    as_draws_df() |>
    dplyr::select(matches("^b_HABITAT.*|^b_SECTOR.*")) |>
    as.matrix()
threshs <- hughes.brm3 |>
    as_draws_df() |>
    dplyr::select(matches("^b_Intercept.*")) |>
    as.matrix()
newdata <- with(hughes, expand.grid(
    HABITAT = levels(HABITAT),
    SECTOR = levels(SECTOR),
    REEF = NA
) )
Xmat = model.matrix(~HABITAT*SECTOR, data=newdata)[,-1]
fit = coefs %*% t(Xmat)
fit=sapply(1:4, function(i) threshs[,i] - fit, simplify='array')
fit = binomial()$linkinv(fit)
fit = aperm(fit, c(1,3,2))
fit = sapply(1:dim(fit)[3], function(i) cbind(fit[,1,i], fit[,-1,i]-fit[,-length(fit[1,,i]),i]), simplify='array')
out1 = sapply(1:dim(fit)[3], function(i) cbind(fit[,,i], 1-rowSums(fit[,,i])), simplify='array')

out2=sweep(out1, 2, 1:5, '*')
out3 = apply(out2, 3, rowSums)

out3 = out3-1
library(broom)
newdata = newdata %>% cbind(tidyMCMC(as.mcmc(out3), conf.int=TRUE, conf.method='HPDinterval'))
ScoreBoundaries = data.frame(Score=factor(0:4), ymin=c(0:4), ymax=c(1:5))
ggplot(newdata) +
    geom_blank(aes(y=estimate, x=HABITAT)) +
    geom_hline(yintercept=1, linetype='dashed', size=0.1) +
    geom_hline(yintercept=2, linetype='dashed', size=0.1) +
    geom_hline(yintercept=3, linetype='dashed', size=0.1) +
    #geom_rect(data=ScoreBoundaries, aes(ymin=ymin, ymax=ymax, xmin=-Inf, xmax=Inf, fill=Score), alpha=0.2) +
    geom_pointrange(aes(y=estimate, x=HABITAT, ymin=conf.low, ymax=conf.high)) +
    facet_grid(~SECTOR) +
    scale_y_continuous('Bleaching score', breaks=(0:4), labels=0:4, limits=c(0,4),expand=c(0,0)) +
    theme_bw() +
    theme(panel.spacing.y=unit(10,'pt'))
###################
n = rep(1, length(levels(hughes$HABITAT)))
names(n) <- levels(hughes$HABITAT)
tuk.cont = multcomp::contrMat(n,'Tukey')
newdata=with(hughes, expand.grid(HABITAT=levels(HABITAT),
                                    SECTOR=levels(SECTOR)))
Xmat = model.matrix(~-1+HABITAT*SECTOR, data=newdata)
Xmat = diag(ncol(Xmat))
newdata = newdata %>% cbind(Xmat)
Xmat = newdata %>% group_by(SECTOR) %>%
    do({
        x=.
        xx = x[,-1:-3] %>% as.matrix
        data.frame(Contrasts = rownames(tuk.cont), tuk.cont %*% xx)
    })
xs = Xmat[,1:3]
Xmat = Xmat[,-1:-3] %>% as.matrix
out4=out3 %*% t(Xmat)
newdata = tidyMCMC(as.mcmc(out4), conf.int=TRUE, conf.method='HPDinterval') %>% bind_cols(xs)
ggplot(newdata) +
    geom_hline(yintercept=0) + 
    geom_pointrange(aes(y=estimate, x=Contrasts, ymin=conf.low, ymax=conf.high, color=SECTOR),
                    position=position_dodge(width=0.5)) +
    facet_grid(SECTOR~fYear) +
    coord_flip() +
    scale_y_continuous('Effect size')+
    theme_bw()



hughes.clmm=ordinal::clmm(oSCORE ~ HABITAT*SECTOR+(1|REEF), data=hughes)
hughes.clmm1=ordinal::clmm(oSCORE ~ HABITAT*SECTOR+(HABITAT|REEF), data=hughes)

hughes.clmm1 %>% ggemmeans(~HABITAT|SECTOR) %>% plot


summary(hughes.clmm)
summary(hughes.clmm1)

emmeans(hughes.clmm, ~oSCORE|HABITAT|SECTOR, mode='prob')
## emmeans(hughes.clmm1, ~oSCORE|HABITAT+SECTOR, mode='prob')
emmeans(hughes.clmm, ~HABITAT|SECTOR, mode='mean.class')
emmeans(hughes.clmm1, ~HABITAT|SECTOR, mode='mean.class')
emmeans(hughes.clmm, ~HABITAT|SECTOR, mode='mean.class') %>% pairs()
## emmeans(hughes.clmm1, ~HABITAT|SECTOR, mode='mean.class') %>% pairs()
```

<!-- END_PRIVATE-->
