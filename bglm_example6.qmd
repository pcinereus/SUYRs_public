---
title: "Bayesian GLM Part6"
author: "Murray Logan"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    ## Format
    theme: [default, ../resources/ws-style.scss]
    css: ../resources/ws_style.css
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    page-layout: full
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 4
    fig-height: 4
    fig-dpi: 72
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    code-copy: true
    highlight-style: atom-one
    ## Execution
    execute:
      echo: true
      cache: true
    ## Rendering
    embed-resources: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
output_dir: "docs"
documentclass: article
fontsize: 12pt
mainfont: Arial
mathfont: LiberationMono
monofont: DejaVu Sans Mono
classoption: a4paper
bibliography: ../resources/references.bib
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(cache.lazy = FALSE,
                      tidy = "styler")
options(tinytex.engine = "xelatex")
```

# Preparations

Load the necessary libraries

```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse)     #for data wrangling etc
library(rstanarm)      #for fitting models in STAN
library(cmdstanr)      #for cmdstan
library(brms)          #for fitting models in STAN
library(standist)      #for exploring distributions
library(HDInterval)    #for HPD intervals
library(posterior)     #for posterior draws
library(coda)          #for diagnostics
library(bayesplot)     #for diagnostics
library(ggmcmc)        #for MCMC diagnostics
library(DHARMa)        #for residual diagnostics
library(rstan)         #for interfacing with STAN
library(emmeans)       #for marginal means etc
library(broom)         #for tidying outputs
library(tidybayes)     #for more tidying outputs
library(ggeffects)     #for partial plots
library(broom.mixed)   #for summarising models
library(ggeffects)     #for partial effects plots
library(bayestestR)    #for ROPE
library(see)           #for some plots
library(easystats)     #for the easystats ecosystem
library(ggridges)      #for ridge plots
library(patchwork)     #for multiple plots
library(modelsummary)  #for data and model summaries 
theme_set(theme_grey()) #put the default ggplot theme back
source("helperFunctions.R")
```

# Scenario

An ecologist studying a rocky shore at Phillip Island, in southeastern Australia, was interested in how
clumps of intertidal mussels are maintained [@Quinn-1988-137]. In particular, he wanted to know how densities of adult
mussels affected recruitment of young individuals from the plankton. As with most marine invertebrates,
recruitment is highly patchy in time, so he expected to find seasonal variation, and the interaction
between season and density - whether effects of adult mussel density vary across seasons - was the aspect
of most interest.

The data were collected from four seasons, and with two densities of adult mussels. The experiment
consisted of clumps of adult mussels attached to the rocks. These clumps were then brought back to the
laboratory, and the number of baby mussels recorded. There were 3-6 replicate clumps for each density
and season combination.

SEASON   DENSITY   RECRUITS   SQRTRECRUITS   GROUP
-------- --------- ---------- -------------- ------------
Spring   Low       15         3.87           SpringLow
..       ..        ..         ..             ..
Spring   High      11         3.32           SpringHigh
..       ..        ..         ..             ..
Summer   Low       21         4.58           SummerLow
..       ..        ..         ..             ..
Summer   High      34         5.83           SummerHigh
..       ..        ..         ..             ..
Autumn   Low       14         3.74           AutumnLow
..       ..        ..         ..             ..

: Format of the quinn.csv data file {#tbl-quinn .table-condensed}

------------------ --------------------------------------------------------------------------------------------
**SEASON**         Categorical listing of Season in which mussel clumps were collected ­ independent variable
**DENSITY**        Categorical listing of the density of mussels within mussel clump ­ independent variable
**RECRUITS**       The number of mussel recruits ­ response variable
**SQRTRECRUITS**   Square root transformation of RECRUITS - needed to meet the test assumptions
**GROUPS**         Categorical listing of Season/Density combinations - used for checking ANOVA assumptions
------------------ --------------------------------------------------------------------------------------------

: Description of the variables in the quinn data file {#tbl-quinn1 .table-condensed}

![Mussel](../resources/mussels.jpg){#fig-mussel height="300"}

# Read in the data

```{r}
quinn <- read_csv("../data/quinn.csv", trim_ws = TRUE)
```
<!-- START_PRIVATE-->
::: {.panel-tabset}
## glimpse
```{r}
#| label: examinData
glimpse(quinn)
```

## head
```{r}
## Explore the first 6 rows of the data
head(quinn)
```

## str
```{r}
str(quinn)
```

## Easystats (datawizard)
```{r}
quinn |> datawizard::data_codebook()
```


## Skim (modelsummary)
```{r}
quinn |> modelsummary::datasummary_skim()
quinn |>
    dplyr::select(-SQRTRECRUITS) |>
    modelsummary::datasummary_skim(
      type = "numeric",
      by = c("SEASON", "DENSITY")
    )
```

:::
<!-- END_PRIVATE-->
	
# Exploratory data analysis

Model formula:
$$
\begin{align}
y_i &\sim{} \mathcal{NB}(\lambda_i, \theta)\\
ln(\mu_i) &= \beta_0 + \sum_{j=1}^nT_{[i],j}.\beta_j\\
\beta_0 &\sim{} \mathcal{N}(2.4, 1.5)\\
\beta_{[1,2,3]} &\sim{} \mathcal{N}(0, 1)\\
\end{align}
$$

where $\beta_{0}$ is the y-intercept (mean of the first group),
$\beta_{[1,2,3]}$ are the vector of effects parameters (contrasting
each group mean to that of the first group and $T{[i],j}$ represents a
$i$ by $j$ model matrix is a model matrix representing the season,
density and their interaction on mussel recruitment.

```{r dataprep, results='markdown', eval=TRUE}
quinn <- quinn |>
  mutate(SEASON = factor(SEASON,
                         levels = c("Spring", "Summer", "Autumn", "Winter")),
                         DENSITY = factor(DENSITY))
```
# Exploratory data analysis
<!-- START_PRIVATE-->

The exploratory data analyses that we performed in the frequentist instalment
of this example are equally valid here.  That is, boxplots and/or violin plots for each population
(substrate type).

```{r EDA, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=6, mhidden=TRUE}
quinn |> head()
quinn |> ggplot(aes(y=RECRUITS, x=SEASON, fill=DENSITY)) + geom_boxplot()
```

**Conclusions:**

- there is clearly a relationship between mean and variance (as would
  be expected with the a Poisson
- evidently there are numerous zeros in the Winter/Low group
<!-- END_PRIVATE-->
# Fit the model 

<!-- START_PRIVATE-->
::: {.panel-tabset}
## rstanarm 

:::: {.panel-tabset}
### Using default priors
In `rstanarm`, the default priors are designed to be weakly informative. They
are chosen to provide moderate regularisation (to help prevent over-fitting) and
help stabilise the computations.

```{r fitModel1a, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarmP <- stan_glm(RECRUITS~SEASON*DENSITY,
                            data = quinn,
                            family = poisson(link = 'log'),
                            refresh = 0,
                            chains = 3, iter = 5000, thin = 5, warmup = 2000)
```

```{r fitModel1b, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarmP |> prior_summary()
```

This tells us:

- for the intercept, when the family is Poisson, it is using a normal prior with a mean of 0 and a
  standard deviation of 2.5.  The 2.5 is used for all intercepts.  It is often
  scaled, but only if it is larger than 2.5 is the scaled version kept.
  
- for the coefficients (in this case, the individual effects), the default prior is a
normal prior centred around 0 with a standard deviations of 5.47, 5/8, 6.02 etc.  This is then
adjusted for the scale of the data by dividing the 2.5 by the
standard deviation of the numerical dummy
variables for the predictor (then rounded). 

```{r fitModel1d, results='markdown', eval=TRUE, mhidden=TRUE}
2.5/apply(model.matrix(~SEASON*DENSITY, quinn)[,-1], 2, sd)
```

-  there is no auxiliary prior as we are employing a Poisson distribution.
   

### Assessing priors

```{r fitModel1f, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarm1 <- stan_glm(RECRUITS~SEASON*DENSITY, data = quinn,
                            family = poisson(link = 'log'),
                            prior_PD = TRUE, 
                            refresh = 0,
                            chains = 3, iter = 5000, thin = 5, warmup = 2000)
```

::::: {.panel-tabset}

#### ggpredict

```{r fitModel1g1, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarm1 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data = TRUE)
quinn.rstanarm1 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data = TRUE) |>
    wrap_plots() &
    scale_y_log10()
## although, since there are zeros...
quinn.rstanarm1 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data = TRUE, jitter = FALSE) |>
    wrap_plots() &
    scale_y_continuous(trans = scales::pseudo_log_trans())
```

#### ggemmeans

```{r fitModel1g2, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarm1 |>
    ggemmeans(~SEASON+DENSITY) |>
    plot(show_data=TRUE) |>
    plot(show_data = TRUE) |>
    wrap_plots() &
    scale_y_log10()
## although, since there are zeros...
quinn.rstanarm1 |>
    ggemmeans(~SEASON+DENSITY) |>
    plot(show_data = TRUE, jitter = FALSE) |>
    wrap_plots() &
    scale_y_continuous(trans = scales::pseudo_log_trans())
```

:::::

**Conclusions:**

- we see that the range of predictions is fairly wide and the predicted means could range
  from 0 to very large (perhaps too large).

### Defining priors

The following link provides some guidance about defining priors.
[https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations]

When defining our own priors, we typically do not want them to be scaled.

If we wanted to define our own priors that were less vague, yet still not likely
to bias the outcomes, we could try the following priors (mainly plucked out of
thin air):

- $\beta_0$: normal centred at 2.3 with a standard deviation of 5 
- $\beta_1$: normal centred at 0 with a standard deviation of 2

Remember the above are applied on the link scale.

I will also overlay the raw data for comparison.

```{r fitModel1h, results='markdown', eval=TRUE, mhidden=TRUE}
quinn |> group_by(SEASON, DENSITY) |>
    summarise(Mean = log(mean(RECRUITS)),
              SD = log(sd(RECRUITS)))
log(sd(quinn$RECRUITS))/
    apply(model.matrix(~SEASON*DENSITY, data = quinn), 2, sd)
quinn.rstanarm2 <- stan_glm(RECRUITS~SEASON*DENSITY, data = quinn,
                            family = poisson(link = 'log'),
                            prior_intercept = normal(2.3, 2, autoscale = FALSE),
                            prior = normal(0, 10, autoscale = FALSE),
                            prior_PD = TRUE, 
                            refresh = 0,
                            chains = 3, iter = 5000, thin = 5, warmup = 2000)
```

::::: {.panel-tabset}

#### ggpredict

```{r fitModel1i1, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarm2 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data = TRUE)
quinn.rstanarm2 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data = TRUE) |>
    wrap_plots() &
    scale_y_log10()
## although, since there are zeros...
quinn.rstanarm2 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data = TRUE, jitter = FALSE) |>
    wrap_plots() &
    scale_y_continuous(trans = scales::pseudo_log_trans())
```

#### ggemmeans

```{r fitModel1i2, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarm2 |>
    ggemmeans(~SEASON+DENSITY) |>
    plot(show_data=TRUE) |>
    plot(show_data = TRUE) |>
    wrap_plots() &
    scale_y_log10()
## although, since there are zeros...
quinn.rstanarm2 |>
    ggemmeans(~SEASON+DENSITY) |>
    plot(show_data = TRUE, jitter = FALSE) |>
    wrap_plots() &
    scale_y_continuous(trans = scales::pseudo_log_trans())
```

:::::

Now lets refit, conditioning on the data.

```{r fitModel1j, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarm3 <- quinn.rstanarm2 |> update(prior_PD = FALSE) 
```

### Plotting prior and posterior 

```{r modelFit1k, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.rstanarm3 |> posterior_vs_prior(color_by = 'vs', group_by = TRUE,
                   facet_args = list(scales = 'free_y'))
```

**Conclusions:**

- in each case, the prior is substantially wider than the posterior, suggesting
  that the posterior is not biased towards the prior.
  
::::: {.panel-tabset}

#### ggpredict

```{r modelFit1l1, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.rstanarm3 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data = TRUE)
```

#### ggemmeans

```{r modelFit1l2, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.rstanarm3 |>
    ggemmeans(~SEASON+DENSITY) |>
    plot(show_data=TRUE) 
```

:::::
::::

## brms
:::: {.panel-tabset}
### Using default priors

In `brms`, the default priors are designed to be weakly informative.  They are
chosen to provide moderate regularisation (to help prevent over-fitting) and
help stabilise the computations.

Unlike `rstanarm`, `brms` models must be compiled before they start sampling.
For most models, the compilation of the stan code takes around 45 seconds.

```{r fitModel2a, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.form <- bf(RECRUITS ~ SEASON*DENSITY,  family = poisson(link = 'log'))
```

```{r fitModel2a1, results='markdown', eval=TRUE, mhidden=TRUE, echo=2}
options(width=100)
get_prior(quinn.form,  data = quinn)
options(width=80)
```


### Defining priors

Remember that the priors are applied on the link (in this case, log) scale.

```{r fitModel2d1, results='markdown', eval=TRUE}
quinn |>
    group_by(SEASON, DENSITY) |>
    summarise(Mean = mean(RECRUITS),
              Median = median(RECRUITS),
              MAD = mad(RECRUITS),
              SD = sd(RECRUITS)) |>
    mutate(log(Mean),
           log(Median),
           log(MAD),
           log(SD))
```

- $\beta_0$: normal centred at 2.3 with a standard deviation of 1.5
- $\beta_1$: normal centred at 0 with a standard deviation of 1



```{r fitModel2h, results='markdown', eval=TRUE, mhidden=TRUE}
priors <- prior(normal(2.4, 1.5), class = 'Intercept') +
    prior(normal(0, 1), class = 'b') 
quinn.brm2 <- brm(quinn.form,
                  data = quinn,
                  prior = priors,
                  sample_prior = "only",
                  refresh = 0,
                  chains = 3,
                  iter = 5000,
                  thin = 5,
                  warmup = 2500,
                  backend = 'cmdstanr') 
```
 
::::: {.panel-tabset}
#### ggpredict 

```{r fitModel2i1, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.brm2 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data=TRUE)
quinn.brm2 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data=TRUE) +
    scale_y_log10()
## Or since there are zeros
quinn.brm2 |>
    ggpredict(~SEASON+DENSITY) |>
    plot(show_data=TRUE) +
    scale_y_continuous(trans = scales::pseudo_log_trans())
```

#### ggemmeans

```{r fitModel2i2, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.brm2 |>
    ggemmeans(~SEASON+DENSITY) |>
    plot(show_data=TRUE)
quinn.brm2 |>
    ggemmeans(~SEASON+DENSITY) |>
    plot(show_data=TRUE) +
    scale_y_log10()
## Or since there are zeros
quinn.brm2 |>
    ggemmeans(~SEASON+DENSITY) |>
    plot(show_data=TRUE) +
    scale_y_continuous(trans = scales::pseudo_log_trans())
```

#### conditional_effects

```{r fitModel2i3, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.brm2 |>
    conditional_effects('SEASON:DENSITY') |>
    plot(points=TRUE)
quinn.brm2 |>
    conditional_effects('SEASON:DENSITY') |>
    plot(points=TRUE) |>
    wrap_plots() &
    scale_y_continuous(trans = scales::pseudo_log_trans())
```

:::::

```{r fitModel2j, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.brmP <- quinn.brm2 |> update(sample_prior = 'yes', refresh = 0)
```

### Plotting prior and posterior

```{r fitModel2k1, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.brmP |> get_variables()
quinn.brmP |> hypothesis('SEASONSummer<0') |> plot()
quinn.brmP |> hypothesis('DENSITYLow<0') |> plot()
quinn.brmP |> hypothesis('SEASONSummer:DENSITYLow<0') |> plot()
```

```{r fitModel2k2, results='markdown', out.width = 600, fig.width = 8, fig.height = 4, eval=TRUE, mhidden=TRUE}
quinn.brmP |> SUYR_prior_and_posterior()
quinn.brmP |>
  posterior_samples() |>
  dplyr::select(-`lp__`) |>
  pivot_longer(everything(), names_to = 'key') |> 
  mutate(Type = ifelse(str_detect(key, 'prior'), 'Prior', 'b'),
         Class = ifelse(str_detect(key, 'Intercept'),  'Intercept',
               ifelse(str_detect(key, 'b'),  'b', 'sigma')),
         Par = str_replace(key, 'b_', '')) |>
  ggplot(aes(x = Type,  y = value, color = Par)) +
  stat_pointinterval(position = position_dodge())+
  facet_wrap(~Class,  scales = 'free')
```

### Exploring the stan code

```{r fitModel2l, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.brmP |> standata()
quinn.brmP |> stancode()
```

::::
:::
<!-- END_PRIVATE-->

# MCMC sampling diagnostics
<!-- START_PRIVATE-->
::: {.panel-tabset}

In addition to the regular model diagnostics checking, for Bayesian analyses, it
is also necessary to explore the MCMC sampling diagnostics to be sure that the
chains are well mixed and have converged on a stable posterior.

There are a wide variety of tests that range from the big picture, overall chain
characteristics to the very specific detailed tests that allow the experienced
modeller to drill down to the very fine details of the chain behaviour.
Furthermore, there are a multitude of packages and approaches for exploring
these diagnostics.


## rstanarm 
:::: {.panel-tabset}
### bayesplot

The `bayesplot` package offers a range of MCMC diagnostics as well as Posterior
Probability Checks (PPC), all of which have a convenient `plot()` interface.
Lets start with the MCMC diagnostics.

```{r modelValidation1a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
available_mcmc()
```

Of these, we will focus on:

- mcmc_trace: this plots the estimates of each parameter over the post-warmup
  length of each MCMC chain.  Each chain is plotted in a different shade of
  blue, with each parameter in its own facet.  Ideally, each **trace** should
  just look like noise without any discernible drift and each of the traces for
  a specific parameter should look the same (i.e, should not be displaced above
  or below any other trace for that parameter).

```{r modelValidation1b, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
plot(quinn.rstanarm3, plotfun='mcmc_trace')
```
  
   The chains appear well mixed and very similar
   
- acf (auto-correlation function): plots the auto-correlation between successive
  MCMC sample lags for each parameter and each chain
  
```{r modelValidation1c, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
plot(quinn.rstanarm3, 'acf_bar')
```

   There is no evidence of auto-correlation in the MCMC samples

- Rhat: Rhat is a measure of convergence between the chains.  The closer the
  values are to 1, the more the chains have converged.  Values greater than 1.05
  indicate a lack of convergence.  There will be an Rhat value for each
  parameter estimated.

```{r modelValidation1d, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
plot(quinn.rstanarm3, 'rhat_hist')
```

  All Rhat values are below 1.05, suggesting the chains have converged.
  
- neff (number of effective samples): the ratio of the number of effective
  samples (those not rejected by the sampler) to the number of samples provides
  an indication of the effectiveness (and efficiency) of the MCMC sampler.
  Ratios that are less than 0.5 for a parameter suggest that the sampler spent
  considerable time in difficult areas of the sampling domain and rejected more
  than half of the samples (replacing them with the previous effective sample).  
  
  If the ratios are low, tightening the priors may help.
  
```{r modelValidation1e, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
plot(quinn.rstanarm3, 'neff_hist')
```

  Ratios all very high.

<details><summary>More diagnostics</summary>
```{r Validation1f, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
plot(quinn.rstanarm3, 'combo')
plot(quinn.rstanarm3, 'violin')
```
</details>


### stan plots

The `rstan` package offers a range of MCMC diagnostics.
Lets start with the MCMC diagnostics.

Of these, we will focus on:

- stan_trace: this plots the estimates of each parameter over the post-warmup
  length of each MCMC chain. Each chain is plotted in a different colour, with
  each parameter in its own facet. Ideally, each **trace** should just look like
  noise without any discernible drift and each of the traces for a specific
  parameter should look the same (i.e, should not be displaced above or below
  any other trace for that parameter).
  
```{r modelValidation1g, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
stan_trace(quinn.rstanarm3)
```

   The chains appear well mixed and very similar
   
- stan_acf (autocorrelation function): plots the autocorrelation between successive
  MCMC sample lags for each parameter and each chain
  
```{r modelValidation1h, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
stan_ac(quinn.rstanarm3) 
```

   There is no evidence of auto-correlation in the MCMC samples

- stan_rhat: Rhat is a **scale reduction factor** measure of convergence between the chains.  The closer the
  values are to 1, the more the chains have converged.  Values greater than 1.05
  indicate a lack of convergence.  There will be an Rhat value for each
  parameter estimated.

```{r modelValidation1i, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
stan_rhat(quinn.rstanarm3) 
```

  All Rhat values are below 1.05, suggesting the chains have converged.
  
- stan_ess (number of effective samples): the ratio of the number of effective
  samples (those not rejected by the sampler) to the number of samples provides
  an indication of the effectiveness (and efficiency) of the MCMC sampler.
  Ratios that are less than 0.5 for a parameter suggest that the sampler spent
  considerable time in difficult areas of the sampling domain and rejected more
  than half of the samples (replacing them with the previous effective sample).  
  
  If the ratios are low, tightening the priors may help.
  
```{r modelValidation1j, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
stan_ess(quinn.rstanarm3)
```

  Ratios all very high.

```{r modelValidation1k, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
stan_dens(quinn.rstanarm3, separate_chains = TRUE)
```


### ggmcmc

The `ggmean` package also has a set of MCMC diagnostic functions.
Lets start with the MCMC diagnostics.

Of these, we will focus on:

- ggs_traceplot: this plots the estimates of each parameter over the post-warmup
  length of each MCMC chain. Each chain is plotted in a different colour, with
  each parameter in its own facet. Ideally, each **trace** should just look like
  noise without any discernible drift and each of the traces for a specific
  parameter should look the same (i.e, should not be displaced above or below
  any other trace for that parameter).

```{r modelValidation1l, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.ggs <- ggs(quinn.rstanarm3, burnin = FALSE, inc_warmup = FALSE)
ggs_traceplot(quinn.ggs)
```

   The chains appear well mixed and very similar
   
- gss_autocorrelation (autocorrelation function): plots the autocorrelation between successive
  MCMC sample lags for each parameter and each chain
  
```{r modelValidation1m, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
ggs_autocorrelation(quinn.ggs)
```

   There is no evidence of auto-correlation in the MCMC samples

- stan_rhat: Rhat is a **scale reduction factor** measure of convergence between the chains.  The closer the
  values are to 1, the more the chains have converged.  Values greater than 1.05
  indicate a lack of convergence.  There will be an Rhat value for each
  parameter estimated.

```{r modelValidation1n, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
ggs_Rhat(quinn.ggs)
```

  All Rhat values are below 1.05, suggesting the chains have converged.
  
- stan_ess (number of effective samples): the ratio of the number of effective
  samples (those not rejected by the sampler) to the number of samples provides
  an indication of the effectiveness (and efficiency) of the MCMC sampler.
  Ratios that are less than 0.5 for a parameter suggest that the sampler spent
  considerable time in difficult areas of the sampling domain and rejected more
  than half of the samples (replacing them with the previous effective sample).  
  
  If the ratios are low, tightening the priors may help.
  
```{r modelValidation1o, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
ggs_effective(quinn.ggs)
```

  Ratios all very high.

<details><summary>More diagnostics</summary>
```{r modelValidation1p, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
ggs_crosscorrelation(quinn.ggs)
```

```{r modelValidation1q, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
ggs_grb(quinn.ggs)
```
</details>

::::

## brms 
:::: {.panel-tabset}
### stan plots

The `brms` package offers a range of MCMC diagnostics.
Lets start with the MCMC diagnostics.

Of these, we will focus on:

- stan_trace: this plots the estimates of each parameter over the post-warmup
  length of each MCMC chain. Each chain is plotted in a different colour, with
  each parameter in its own facet. Ideally, each **trace** should just look like
  noise without any discernible drift and each of the traces for a specific
  parameter should look the same (i.e, should not be displaced above or below
  any other trace for that parameter).
  
```{r modelValidation2g, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.brmP$fit |> stan_trace()
quinn.brmP$fit |> stan_trace(inc_warmup=TRUE)
```

   The chains appear well mixed and very similar
   
- stan_acf (auto-correlation function): plots the auto-correlation between successive
  MCMC sample lags for each parameter and each chain
  
```{r modelValidation2h, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.brmP$fit |> stan_ac() 
```

   There is no evidence of auto-correlation in the MCMC samples

- stan_rhat: Rhat is a **scale reduction factor** measure of convergence between the chains.  The closer the
  values are to 1, the more the chains have converged.  Values greater than 1.05
  indicate a lack of convergence.  There will be an Rhat value for each
  parameter estimated.

```{r modelValidation2i, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.brmP$fit |> stan_rhat() 
```

  All Rhat values are below 1.05, suggesting the chains have converged.
  
- stan_ess (number of effective samples): the ratio of the number of effective
  samples (those not rejected by the sampler) to the number of samples provides
  an indication of the effectiveness (and efficiency) of the MCMC sampler.
  Ratios that are less than 0.5 for a parameter suggest that the sampler spent
  considerable time in difficult areas of the sampling domain and rejected more
  than half of the samples (replacing them with the previous effective sample).  
  
  If the ratios are low, tightening the priors may help.
  
```{r modelValidation2j, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.brmP$fit |> stan_ess()
```

  Ratios all very high.

```{r modelValidation2k, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.brmP$fit |> stan_dens(separate_chains = TRUE)
```

::::
:::
<!-- END_PRIVATE-->

# Model validation 

<!-- START_PRIVATE-->
::: {.panel-tabset}
## rstanarm 
:::: {.panel-tabset}
### pp check
Post predictive checks provide additional diagnostics about the fit of the
model.  Specifically, they provide a comparison between predictions drawn from
the model and the observed data used to train the model.

```{r modelValidation3a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
available_ppc()
```

- dens_overlay: plots the density distribution of the observed data (black line)
overlayed on top of 50 density distributions generated from draws from the model
(light blue).  Ideally, the 50 realisations should be roughly consistent with
the observed data.

```{r modelValidation3b, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
pp_check(quinn.rstanarm3,  plotfun='dens_overlay')
```

The model draws are broadly similar to the observed data.

- error_scatter_avg: this plots the observed values against the average
  residuals. Similar to a residual plot, we do not want to see any patterns in
  this plot.  There is some pattern remaining in these residuals.

```{r modelValidation3c, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
pp_check(quinn.rstanarm3, plotfun='error_scatter_avg')
```

The predictive error seems to be related to the predictor - the model performs
poorest at higher recruitments


- error_scatter_avg_vs_x: this is similar to a regular residual plot and as such
  should be interpreted as such.  

```{r modelValidation3d, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
pp_check(quinn.rstanarm3, x=as.numeric(quinn$SEASON), plotfun='error_scatter_avg_vs_x')
pp_check(quinn.rstanarm3, x=as.numeric(quinn$DENSITY), plotfun='error_scatter_avg_vs_x')
```

- intervals:  plots the observed data overlayed on top of posterior predictions
associated with each level of the predictor.  Ideally, the observed data should
all fall within the predictive intervals.


```{r modelValidation3e, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
pp_check(quinn.rstanarm3, x=as.numeric(quinn$SEASON), plotfun='intervals')
```

The modelled predictions seem to do a reasonable job of representing the observations. 

The `shinystan` package allows the full suite of MCMC diagnostics and posterior
predictive checks to be accessed via a web interface.

```{r modelValidation3g, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
#library(shinystan)
#launch_shinystan(quinn.rstanarm3)
```

### DHARMa residuals

DHARMa residuals provide very useful diagnostics.  Unfortunately, we cannot
directly use the `simulateResiduals()` function to generate the simulated
residuals.  However, if we are willing to calculate some of the components
yourself, we can still obtain the simulated residuals from the fitted stan model.

We need to supply:

- simulated (predicted) responses associated with each observation.
- observed values
- fitted (predicted) responses (averaged) associated with each observation

```{r modelValidation4a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
preds <- posterior_predict(quinn.rstanarm3,  nsamples=250,  summary=FALSE)
quinn.resids <- createDHARMa(simulatedResponse = t(preds),
                            observedResponse = quinn$RECRUITS,
                            fittedPredictedResponse = apply(preds, 2, median),
                            integerResponse = TRUE)
plot(quinn.resids)
```

**Conclusions:**

- the simulated residuals suggest there might be an issue of dispersion.
- it might be worth exploring either zero-inflation, a negative
  binomial model, or including a observation-level random effect.

::::
## brms 
:::: {.panel-tabset}
### pp check
Post predictive checks provide additional diagnostics about the fit of the
model.  Specifically, they provide a comparison between predictions drawn from
the model and the observed data used to train the model.

```{r modelValidation5a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
available_ppc()
```

- dens_overlay: plots the density distribution of the observed data (black line)
overlayed on top of 50 density distributions generated from draws from the model
(light blue).  Ideally, the 50 realisations should be roughly consistent with
the observed data.

```{r modelValidation5b, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.brmP |> pp_check(type = 'dens_overlay', ndraws = 100)
```

The model draws appear to represent the shape of the observed data reasonably well 

- error_scatter_avg: this plots the observed values against the average
  residuals. Similar to a residual plot, we do not want to see any patterns in
  this plot.  There is some pattern remaining in these residuals.

```{r modelValidation5c, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.brmP |> pp_check(type = 'error_scatter_avg')
```

The predictive error seems to be related to the predictor - the model performs
poorest at higher recruitments.

- intervals:  plots the observed data overlayed on top of posterior predictions
associated with each level of the predictor.  Ideally, the observed data should
all fall within the predictive intervals.


```{r modelValidation5e, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
quinn.brmP |> pp_check(type='intervals')
## quinn.brmP |> pp_check(group='DENSITY', type='intervals')
```

Whilst the modelled predictions do a reasonable job of representing the observed data, 
the observed data do appear to be more varied than the model is representing.

The `shinystan` package allows the full suite of MCMC diagnostics and posterior
predictive checks to be accessed via a web interface.

```{r modelValidation5g, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=6, fig.height=4}
#library(shinystan)
#launch_shinystan(quinn.brmP)
```

### DHARMa residuals

DHARMa residuals provide very useful diagnostics.  Unfortunately, we cannot
directly use the `simulateResiduals()` function to generate the simulated
residuals.  However, if we are willing to calculate some of the components
yourself, we can still obtain the simulated residuals from the fitted stan model.

We need to supply:

- simulated (predicted) responses associated with each observation.
- observed values
- fitted (predicted) responses (averaged) associated with each observation

```{r modelValidation6a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
preds <- quinn.brmP |> posterior_predict(nsamples = 250,  summary = FALSE)
quinn.resids <- createDHARMa(simulatedResponse = t(preds),
                            observedResponse = quinn$RECRUITS,
                            fittedPredictedResponse = apply(preds, 2, median),
                            integerResponse = TRUE)
quinn.resids |> plot()

quinn.resids |> testDispersion()
quinn.resids |> testZeroInflation()
```

```{r modelValidation6aa, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=10}
quinn.resids <- make_brms_dharma_res(quinn.brmP, integerResponse = TRUE)
wrap_elements(~testUniformity(quinn.resids)) +
               wrap_elements(~plotResiduals(quinn.resids, form = factor(rep(1, nrow(quinn))))) +
               wrap_elements(~plotResiduals(quinn.resids, quantreg = TRUE)) +
               wrap_elements(~testDispersion(quinn.resids))

```
**Conclusions:**

- the simulated residuals do suggest that there might be a dispersion issue 
- it might be worth exploring either zero-inflation, a negative
  binomial model, or including a observation-level random effect.

::::
:::
<!-- END_PRIVATE-->

# Explore negative binomial model
<!-- START_PRIVATE-->
::: {.panel-tabset}
## rstanarm
:::: {.panel-tabset}
### Fit model

```{r fitModel3a, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarmNB <- stan_glm(RECRUITS~SEASON*DENSITY, data = quinn,
                            family = neg_binomial_2(link = 'log'),
                            prior_intercept = normal(2.3, 2, autoscale = FALSE),
                            prior = normal(0, 10, autoscale = FALSE),
                            prior_aux = rstanarm::exponential(rate = 1, autoscale = FALSE),
                            prior_PD = FALSE, 
                            refresh = 0,
                            chains = 3, iter = 5000, thin = 5, warmup = 2000)
```

### Explore posteriors vs priors

```{r fitModel3b, results='markdown', eval=TRUE, mhidden=TRUE}
posterior_vs_prior(quinn.rstanarmNB, color_by='vs', group_by=TRUE,
                   facet_args=list(scales='free_y'))
```

### ggpredict

```{r fitModel3b2, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarmNB |> ggpredict(~SEASON+DENSITY) |> plot(show_data = TRUE)
```

### ggemmeans

```{r fitModel3b3, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarmNB |>
    ggemmeans(~SEASON+DENSITY, back.transform = TRUE) |>
    plot(show_data=TRUE)
```
There seems to be a bug here.  The expected values should be being back transformed to the response scale, however, they are clearly not.  Notice that the expected values (and associated CI) are low and tiny respectively).

### MCMC diagnostics

```{r fitModel3b4, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.rstanarmNB |> plot('mcmc_trace')
quinn.rstanarmNB |> plot('mcmc_acf_bar')
quinn.rstanarmNB |> plot('mcmc_rhat_hist')
quinn.rstanarmNB |> plot('mcmc_neff_hist')
```

### DHARMa residuals
```{r fitModel3b5, results='markdown', eval=TRUE, mhidden=TRUE, fig.width = 8, fig.height = 4, out.width = 600}
preds <- posterior_predict(quinn.rstanarmNB,  nsamples=250,  summary=FALSE)
quinn.resids <- createDHARMa(simulatedResponse = t(preds),
                            observedResponse = quinn$RECRUITS,
                            fittedPredictedResponse = apply(preds, 2, median),
                            integerResponse=TRUE)
plot(quinn.resids)
quinn.resids |> testDispersion()
```

Now possibly under-dispersed..

### Model comparison

```{r fitModel3c, results='markdown', eval=TRUE, mhidden=TRUE}
(loo.P = loo(quinn.rstanarmP))
(loo.NB = loo(quinn.rstanarmNB))
loo_compare(loo.P, loo.NB)
```

::::

## brms 
::: {.panel-tabset}
### Fit model
```{r fitModel4a, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.form <- bf(RECRUITS ~ SEASON*DENSITY,  family = negbinomial(link = 'log'))
get_prior(quinn.form,  data = quinn)

priors <- prior(normal(2.4, 1.5), class = 'Intercept') +
    prior(normal(0, 1), class = 'b') +
    prior(gamma(0.01, 0.01), class = "shape")
quinn.brmsNB <- brm(quinn.form,
                    data = quinn,
                    prior = priors,
                    refresh = 0,
                    chains = 3,
                    iter = 5000,
                    thin = 5,
                    warmup = 2500,
                    backend = "cmdstanr") 
```

### DHARMa residuals

```{r fitModel4a1, results='markdown', eval=TRUE, mhidden=TRUE, fig.width = 8, fig.height = 4, out.width = 600}
preds <- posterior_predict(quinn.brmsNB,  nsamples = 250,  summary = FALSE)
quinn.resids <- createDHARMa(simulatedResponse = t(preds),
                            observedResponse = quinn$RECRUITS,
                            fittedPredictedResponse = apply(preds, 2, median),
                            integerResponse = TRUE)
plot(quinn.resids)
```

```{r fitModel4a1a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width = 8, fig.height = 4, out.width = 600}
quinn.resids <- make_brms_dharma_res(quinn.brmsNB, integerResponse = TRUE)
wrap_elements(~testUniformity(quinn.resids)) +
               ## wrap_elements(~plotResiduals(quinn.resids, form = factor(rep(1, nrow(quinn))))) +
               wrap_elements(~plotResiduals(quinn.resids, quantreg = TRUE)) +
               wrap_elements(~testDispersion(quinn.resids))

```
::::
:::
<!-- END_PRIVATE-->
# Partial effects plots 
<!-- START_PRIVATE-->
::: {.panel-tabset}
## rstanarm
:::: {.panel-tabset}	
### ggpredict

```{r partialPlot1a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB |> ggpredict(~SEASON+DENSITY) |> plot(show_data=TRUE)
```


### ggemmeans

```{r partialPlot1b, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB |>
    ggemmeans(~SEASON|DENSITY,  type='fixed', back.transform = TRUE) |>
    plot(show_data=TRUE)
```

### fitted_draws

```{r partialPlot1c, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB |>
    fitted_draws(newdata=quinn) |>
    median_hdci() |>
    ggplot(aes(x=SEASON, colour=DENSITY, y=.value)) +
    geom_pointrange(aes(ymin=.lower, ymax=.upper), position = position_dodge(width=0.2)) + 
    geom_line(position = position_dodge(width=0.2)) +
    geom_point(data=quinn,  aes(y=RECRUITS,  x=SEASON, colour = DENSITY), position = position_dodge(width=0.2))
```
::::
## brms 
:::: {.panel-tabset}
### conditional_effects

```{r partialPlot2d, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> conditional_effects("SEASON:DENSITY") |> plot(points = TRUE)
```

### ggpredict

```{r partialPlot2a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> ggpredict(~SEASON+DENSITY) |> plot(show_data = TRUE)
```


### ggemmeans

```{r partialPlot2b, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> ggemmeans(~SEASON|DENSITY) |> plot(show_data = TRUE)
```

### fitted_draws

```{r partialPlot2c, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |>
    fitted_draws(newdata=quinn) |>
    median_hdci() |>
    ggplot(aes(x=SEASON, colour=DENSITY, y=.value)) +
    geom_pointrange(aes(ymin=.lower, ymax=.upper), position = position_dodge(width=0.2)) + 
    geom_line(position = position_dodge(width=0.2)) +
    geom_point(data=quinn,  aes(y=RECRUITS,  x=SEASON, colour = DENSITY), position = position_dodge(width=0.2))
```

::::
:::
<!-- END_PRIVATE-->

# Model investigation 

<!-- START_PRIVATE-->
::: {.panel-tabset}
## rstanarm 
::: {.panel-tabset}
`rstanarm` captures the MCMC samples from `stan` within the returned list.
There are numerous ways to retrieve and summarise these samples.  The first
three provide convenient numeric summaries from which you can draw conclusions,
the last four provide ways of obtaining the full posteriors. 

### summary

The `summary()` method generates simple summaries (mean, standard deviation as
well as 10, 50 and 90 percentiles).

```{r summariseModel1a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB |> summary()
```

```{r summariseModel1a1, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5, echo=FALSE}
quinn.sum <- summary(quinn.rstanarmNB)
```


**Conclusions:**

- the intercept represents the estimated mean of the first combination of Season
  (Spring) and Density (High). On the link scale this is 
  `r round(quinn.sum[1,1], 2)`
- the difference between Low and High adult density in spring is 
  `r round(quinn.sum[2,1], 2)`, although this is not significant
- the difference between Spring and Summer for High adult density is 
  `r round(quinn.sum[3,1], 2)`
- the difference between Spring and Autumn for High adult density is 
  `r round(quinn.sum[4,1], 2)`
- the difference between Spring and Winter for High adult density is 
  `r round(quinn.sum[5,1], 2)`
- if there were no interactions, we would expect the Low density Summer
  recruitment to be the additive of the main effects (Low and Summer).  However,
  the modelled mean is `r -1*round(quinn.sum[6,1], 2)` less than the additive
  effects would have expected.  This value is significantly different to 0,
  indicating that there is evidence that the density effect in Summer is
  different to that in Spring.
 - the density effect in Autumn and Winter were not found to be significantly
  different from what you would expect from an additive model. 

### tidyMCMC

```{r summariseModel1b, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
tidyMCMC(quinn.rstanarmNB$stanfit, estimate.method='median',  conf.int=TRUE,  conf.method='HPDinterval',  rhat=TRUE, ess=TRUE)
```
```{r summariseModel1b1, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=FALSE}
quinn.tidy <- tidyMCMC(quinn.rstanarmNB$stanfit, estimate.method='median',  conf.int=TRUE,  conf.method='HPDinterval',  rhat=TRUE, ess=TRUE)
```

**Conclusions:**

See above

### summarise_draws (posterior)

```{r summariseModel1dd, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB$stanfit |>
    summarise_draws(median,
                    HDInterval::hdi,
                    rhat, length, ess_bulk, ess_tail)
```

We can also alter the CI level.

```{r summariseModel1d2, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB$stanfit |>
    summarise_draws(median,
                    ~HDInterval::hdi(.x, credMass = 0.9),
                    rhat, length, ess_bulk, ess_tail)
```

Arguably, it would be better to back-transform to the ratio scale

```{r summariseModel1d3, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB$stanfit |>
    summarise_draws(
        ~ median(exp(.x)),
        ~HDInterval::hdi(exp(.x)),
        rhat, length, ess_bulk, ess_tail)
```

### as_draws_df (posteriors)

```{r summariseModel1m, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB$stanfit |> as_draws_df()
quinn.rstanarmNB$stanfit |>
    as_draws_df() |>
    summarise_draws(
        median,
        ~ HDInterval::hdi(.x),
        rhat,
        ess_bulk
    )

quinn.rstanarmNB$stanfit |>
    as_draws_df() |>
    exp() |> 
    summarise_draws(
        median,
        ~ HDInterval::hdi(.x),
        rhat,
        ess_bulk
    )
```

### gather_draws

Due to the presence of a log transform in the predictor, it is better to use the
regex version.
```{r summariseModel1c, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB |> get_variables()
quinn.draw <- quinn.rstanarmNB |> gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`,  regex=TRUE)
quinn.draw

exceedP <- function(x, Val = 0) mean(x>Val)

quinn.rstanarmNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`,  regex=TRUE) |>
    mutate(.value = exp(.value)) |>
    summarise_draws(median,
                    HDInterval::hdi,
                    rhat,
                    length,
                    ess_bulk,
                    ess_tail,
                    ~ exceedP(.x, 1))
```

We can then summarise this

```{r summariseModel1c1, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.draw |> median_hdci()
```

We could alternatively express the parameters on the response scale.
```{r summariseModel1c8, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.draw |> median_hdci(exp(.value))
```

```{r summariseModel1c3, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=FALSE}
quinn.gather <- quinn.rstanarmNB |> gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`,  regex=TRUE) |>
  median_hdci()
```

```{r summariseModel1c4, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
quinn.rstanarmNB |> 
  gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
  ggplot() + 
  stat_halfeye(aes(x=.value,  y=.variable)) +
  facet_wrap(~.variable, scales='free')
quinn.rstanarmNB |> 
  gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
  ggplot() + 
    geom_vline(xintercept=0, linetype='dashed') +
    stat_halfeye(aes(x=.value,  y=.variable)) +
    theme_classic()
```
 
We could alternatively express the parameters on the response scale.
```{r summariseModel1c5, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
quinn.rstanarmNB |> 
  gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
  group_by(.variable) |>
  mutate(.value=exp(.value)) |>
  median_hdci()
quinn.rstanarmNB |> 
  gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
  mutate(.value=exp(.value)) |>
  ggplot() + 
    geom_vline(xintercept=1, linetype='dashed') +
    stat_halfeye(aes(x=.value,  y=.variable)) +
    scale_x_continuous('', trans = scales::log2_trans(), breaks=unique(as.vector(2^(0:4 %o% c(-1,1))))) +
    theme_classic()
```

### bayesplot

```{r summariseModel1j, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB |> plot(plotfun='mcmc_intervals') 
```

### slab (ggdist)

```{r summariseModel2d5, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
## Link scale
quinn.rstanarmNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    ggplot() +
    stat_slab(aes(x = .value, y = .variable,
                  fill = stat(ggdist::cut_cdf_qi(cdf,
                           .width = c(0.5, 0.8, 0.95), 
                           labels = scales::percent_format())
                           )), color='black') + 
    geom_vline(xintercept=0, linetype='dashed') +
    scale_fill_brewer('Interval', direction = -1, na.translate = FALSE) 
## Fractional scale
quinn.rstanarmNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    mutate(.value=exp(.value)) |>
    ggplot() +
    stat_slab(aes(x = .value, y = .variable,
                  fill = stat(ggdist::cut_cdf_qi(cdf,
                           .width = c(0.5, 0.8, 0.95), 
                           labels = scales::percent_format())
                           )), color='black') + 
    geom_vline(xintercept=1, linetype='dashed') +
    scale_fill_brewer('Interval', direction = -1, na.translate = FALSE) +
    scale_x_continuous(trans = scales::log2_trans())
```

### half-eye (ggdist)

```{r summariseModel1c44, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
quinn.rstanarmNB |> 
  gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
  ggplot() + 
  stat_halfeye(aes(x=.value,  y=.variable)) +
  facet_wrap(~.variable, scales='free')

quinn.rstanarmNB |> 
  gather_draws(`.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
  ggplot() + 
    stat_halfeye(aes(x=.value,  y=.variable)) +
    geom_vline(xintercept = 0, linetype = 'dashed')

quinn.rstanarmNB |>  
  gather_draws(`.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
  ggplot() + 
    stat_halfeye(aes(x=exp(.value),  y=.variable)) +
    geom_vline(xintercept = 1, linetype = 'dashed') +
    scale_x_continuous(trans = scales::log2_trans())
```

### density ridges (ggridges)

```{r summariseModel1c7, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
quinn.rstanarmNB |> 
  gather_draws(`.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
  ggplot() + 
    geom_density_ridges(aes(x=.value, y = .variable), alpha=0.4) +
    geom_vline(xintercept = 0, linetype = 'dashed')
##Or on a fractional scale
quinn.rstanarmNB |> 
  gather_draws(`.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
  ggplot() + 
    geom_density_ridges_gradient(aes(x=exp(.value),
                                     y = .variable,
                                     fill = stat(x)),
                                 alpha=0.4, colour = 'white',
                                 quantile_lines = TRUE,
                                 quantiles = c(0.025, 0.975)) +
    geom_vline(xintercept = 1, linetype = 'dashed') +
    scale_x_continuous(trans = scales::log2_trans()) +
    scale_fill_viridis_c(option = "C")
```
 
### tidy_draws

This is purely a graphical depiction on the posteriors.

```{r summariseModel1d, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB |> tidy_draws()
```

### spread_draws

```{r summariseModel1e, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB |> spread_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`,  regex=TRUE)
```

### posterior_samples
```{r summariseModel1f, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.rstanarmNB |> posterior_samples() |> as_tibble()
```

### $R^2$

Unfortunately, $R^2$ calculations for models other than Gaussian and Binomial
have not yet been implemented for `rstanarm` models yet.

```{r summariseModel1g, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
#quinn.rstanarmNB |> bayes_R2() |> median_hdci
```

::::
## brms 
::: {.panel-tabset}
`brms` captures the MCMC samples from `stan` within the returned list.
There are numerous ways to retrieve and summarise these samples.  The first
three provide convenient numeric summaries from which you can draw conclusions,
the last four provide ways of obtaining the full posteriors. 

### summary

The `summary()` method generates simple summaries (mean, standard deviation as
well as 10, 50 and 90 percentiles).

```{r summariseModel2a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> summary()
```

```{r summariseModel2a1, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5, echo=FALSE}
quinn.sum <- quinn.brmsNB |> summary()
quinn.sum <- quinn.sum$fixed
```

**Conclusions:**

- the intercept represents the estimated mean of the first combination of Season
  (Spring) and Density (High). On the link scale this is 
  `r round(quinn.sum[1,1], 2)`
- the difference between Low and High adult density in spring is 
  `r round(quinn.sum[2,1], 2)`, although this is not significant
- the difference between Spring and Summer for High adult density is 
  `r round(quinn.sum[3,1], 2)`
- the difference between Spring and Autumn for High adult density is 
  `r round(quinn.sum[4,1], 2)`
- the difference between Spring and Winter for High adult density is 
  `r round(quinn.sum[5,1], 2)`
- if there were no interactions, we would expect the Low density Summer
  recruitment to be the additive of the main effects (Low and Summer).  However,
  the modelled mean is `r -1*round(quinn.sum[6,1], 2)` less than the additive
  effects would have expected.  This value is significantly different to 0,
  indicating that there is evidence that the density effect in Summer is
  different to that in Spring.
 - the density effect in Autumn and Winter were not found to be significantly
  different from what you would expect from an additive model. 
 

### tidyMCMC

```{r summariseModel2b, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB$fit |>
    tidyMCMC(estimate.method = 'median',
             conf.int = TRUE,
             conf.method = 'HPDinterval',
             rhat = TRUE,
             ess = TRUE)
```
```{r summariseModel2b1, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=FALSE}
quinn.tidy <- tidyMCMC(quinn.brmsNB$fit, estimate.method='median',  conf.int=TRUE,  conf.method='HPDinterval',  rhat=TRUE, ess=TRUE)
```

**Conclusions:**

see above

### as_draws_df (posteriors)

```{r summariseModel2m, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> as_draws_df()
quinn.brmsNB |>
  as_draws_df() |>
  summarise_draws(
    median,
    ~ HDInterval::hdi(.x),
    rhat,
    ess_bulk, ess_tail
  )

quinn.brmsNB |>
    as_draws_df() |>
    exp() |>
    summarise_draws(
        median,
        HDInterval::hdi,
        rhat,
        length,
        ess_bulk, ess_tail
    )
```

### gather_draws

Due to the presence of a log transform in the predictor, it is better to use the
regex version.
```{r summariseModel2c, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> get_variables()
quinn.draw <- quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`,  regex = TRUE)
quinn.draw

quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`,  regex = TRUE) |>
    mutate(.value = exp(.value)) |>
    summarise_draws(median,
                    ~HDInterval::hdi(.x, credMass = 0.95),
                    rhat,
                    length,
                    ess_bulk, ess_tail)
    

exceedP <- function(x, Val = 0) mean(x>Val)
quinn.brmsNB |>
    tidy_draws() |>
    exp() |>
    dplyr::select(starts_with("b_")) |>
    summarise_draws(median,
                    ~HDInterval::hdi(.x, credMass = 0.9),
                    rhat,
                    ess_bulk, ess_tail,
                    ~exceedP(.x, 1))
```

We can then summarise this

```{r summariseModel2c1, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.draw |> median_hdci()
```

We could alternatively express the parameters on the response scale.

```{r summariseModel2c5, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
quinn.draw |> 
  median_hdci(exp(.value))
```

```{r summariseModel2c3, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=FALSE}
quinn.gather <- quinn.brmsNB |> gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`,  regex = TRUE) |>
  median_hdci()
```

```{r summariseModel2c45, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
    ggplot() +
    geom_vline(xintercept=0, linetype='dashed') +
    stat_slab(aes(x = .value, y = .variable,
                  fill = stat(ggdist::cut_cdf_qi(cdf,
                           .width = c(0.5, 0.8, 0.95), 
                           labels = scales::percent_format())
                           )), color='black') + 
    scale_fill_brewer('Interval', direction = -1, na.translate = FALSE) 

quinn.brmsNB |> 
  gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |> 
  ggplot() + 
    geom_vline(xintercept=0, linetype='dashed') +
    stat_halfeye(aes(x=.value,  y=.variable)) +
    theme_classic()
```
 
We could alternatively express the parameters on the response scale.
```{r summariseModel2c55, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
quinn.brmsNB |> 
  gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
  group_by(.variable) |>
  mutate(.value=exp(.value)) |>
  median_hdci()

quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    mutate(.value=exp(.value)) |>
    ggplot() +
    geom_vline(xintercept=1, linetype='dashed') +
    stat_slab(aes(x = .value, y = .variable,
                  fill = stat(ggdist::cut_cdf_qi(cdf,
                           .width = c(0.5, 0.8, 0.95), 
                           labels = scales::percent_format())
                           )), color='black') + 
    scale_x_continuous('', trans = scales::log2_trans(), breaks=unique(as.vector(2^(0:4 %o% c(-1,1))))) +
    scale_fill_brewer('Interval', direction = -1, na.translate = FALSE) +
    theme_classic()
```

**Conclusions:**

- the estimated mean (expected number of newly recruited barnacles) on the ALG1
  surface is `r round(as.numeric(quinn.gather[1,2]),2)`.  This is the mean of the posterior distribution
  for this parameter.  If we back-transform this to the response scale, this
  becomes `r round(exp(as.numeric(quinn.gather[1, 2])),2)`.
- the estimated effect of ALG2 vs ALG1 is `r round(as.numeric(quinn.gather[2,2]),2)`
(median) with a standard error of `r round(as.numeric(quinn.gather[2,3]),2)`.
  The 95% credibility intervals indicate that we are 95% confident that the effect is between 
  `r round(as.numeric(quinn.gather[2,4]),2)` and `r round(as.numeric(quinn.gather[2,5]),2)` - e.g. there is a
  significant positive effect.  When back-transformed onto the response scale, we see
  that barnacle recruitment on ALG2 is `r round(exp(as.numeric(quinn.gather[2,2])),2)` times
  higher than that on ALG1.
  This represents a `r round(100*(exp(as.numeric(quinn.gather[2, 2]))-1), 0)`% increase in
  barnacle recruitment.
 - the estimated effect of NB and S are `r round(as.numeric(quinn.gather[3, 2]), 2)` and 
  `r round(as.numeric(quinn.gather[4, 2]), 2)` respectively, which equate to 
  `r round(1/exp(as.numeric(quinn.gather[3,2])),2)` and  `r round(1/exp(as.numeric(quinn.gather[4,2])),2)` fold
  declines respectively. 
- Rhat and number of effective samples for each parameter are also provided as
  MCMC diagnostics and all look good.


### bayesplot

```{r summariseModel2j, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB$fit |> plot(type='intervals') 
```

### slab (ggdist)

```{r summariseModel2d55, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
## Link scale
quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    ggplot() +
    stat_slab(aes(x = .value, y = .variable,
                  fill = stat(ggdist::cut_cdf_qi(cdf,
                           .width = c(0.5, 0.8, 0.95), 
                           labels = scales::percent_format())
                           )), color='black') + 
    geom_vline(xintercept=0, linetype='dashed') +
    scale_fill_brewer('Interval', direction = -1, na.translate = FALSE) 
## Fractional scale
quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    mutate(.value=exp(.value)) |>
    ggplot() +
    stat_slab(aes(x = .value, y = .variable,
                  fill = stat(ggdist::cut_cdf_qi(cdf,
                           .width = c(0.5, 0.8, 0.95), 
                           labels = scales::percent_format())
                           )), color='black') + 
    geom_vline(xintercept=1, linetype='dashed') +
    scale_fill_brewer('Interval', direction = -1, na.translate = FALSE) +
    scale_x_continuous(trans = scales::log2_trans())
```

### half-eye (ggdist)

```{r summariseModel2c4, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    ggplot() + 
    stat_halfeye(aes(x=.value,  y=.variable)) +
    facet_wrap(~.variable, scales='free')

quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    ggplot() + 
    stat_halfeye(aes(x=.value,  y=.variable)) +
    geom_vline(xintercept = 0, linetype = 'dashed')

quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    ggplot() + 
    stat_halfeye(aes(x=exp(.value),  y=.variable)) +
    geom_vline(xintercept = 1, linetype = 'dashed') +
    scale_x_continuous(trans = scales::log2_trans())
```

### ggridges

```{r summariseModel2c7, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5,echo=TRUE}
quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    ggplot() + 
    geom_density_ridges(aes(x=.value, y = .variable), alpha=0.4) +
    geom_vline(xintercept = 0, linetype = 'dashed')
##Or on a fractional scale
quinn.brmsNB |>
    gather_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`, regex=TRUE) |>
    ggplot() + 
    geom_density_ridges_gradient(aes(x=exp(.value),
                                     y = .variable,
                                     fill = stat(x)),
                                 alpha=0.4, colour = 'white',
                                 quantile_lines = TRUE,
                                 quantiles = c(0.025, 0.975)) +
    geom_vline(xintercept = 1, linetype = 'dashed') +
    scale_x_continuous(trans = scales::log2_trans()) +
    scale_fill_viridis_c(option = "C")
```
 
### tidy_draws

This is purely a graphical depiction on the posteriors.

```{r summariseModel2d, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> tidy_draws()
```

### spread_draws

```{r summariseModel2e, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> spread_draws(`.Intercept.*|.*SEASON.*|.*DENSITY.*`,  regex=TRUE)
```

### posterior_samples
```{r summariseModel2f, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> posterior_samples() |> as_tibble()
```

### $R^2$

```{r summariseModel2g, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
quinn.brmsNB |> bayes_R2(summary=FALSE) |> median_hdci()
```

### ROPE

Region of Practical Equivalence

```{r summariseModel2k, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=5}
0.1 * log(sd(quinn$RECRUITS))
quinn.brmsNB |> rope(range = c(-0.28, 0.28))
rope(quinn.brmsNB, range = c(-0.28, 0.28)) |> plot()

## Or based on fractional scale
quinn.brmsNB |>
    as_draws_df('^b_SEASON.*|^b_DENSITY.*', regex = TRUE) |>
    exp() |> 
    ## equivalence_test(range = c(0.755, 1.32))
    rope(range = c(0.755, 1.32))
quinn.mcmc <-
    quinn.brmsNB |>
    as_draws_df('^b_SEASON.*|^b_DENSITY.*', regex = TRUE) |>
    exp()
quinn.mcmc |>
    rope(range = c(0.755, 1.32))
## note, the following is not quit correct, it does not get the CI correct
quinn.mcmc |>
    rope(range = c(0.755, 1.32)) |>
    plot(data = quinn.brmsNB)


quinn.mcmc |>
    equivalence_test(range = c(0.755, 1.32)) 
```

### Modelsummary
```{r}
#| label: modelsummary
#| results: markup
#| eval: true
#| echo: true
#| cache: false
quinn.brmsNB |> modelsummary(
  statistic = c("conf.low", "conf.high"),
  shape = term ~ statistic,
  exponentiate = TRUE
)
```

```{r}
#| label: modelsummary_plot
#| results: markup
#| eval: true
#| echo: true
#| cache: false
quinn.brmsNB |> modelplot(coef_omit = "shape", exponentiate = TRUE)
```

::::
:::
<!-- END_PRIVATE-->
# Further investigations 

<!-- START_PRIVATE-->
::: {.panel-tabset}
In order to tease apart the significant interaction(s), it might be useful to
explore the effect of Density separately within each Season.

## rstanarm 
:::: {.panel-tabset}
### Simple

```{r mainEffects1a, results='markdown', eval=TRUE, mhidden=TRUE}
## fold scale
quinn.rstanarmNB |>
    emmeans(~DENSITY|SEASON, type='response') |>
    pairs()
## absolute response scale
quinn.rstanarmNB |>
    emmeans(~DENSITY|SEASON, type='link') |>
    regrid() |>
    pairs()
```

### Using full posteriors

```{r mainEffects1b, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.em <- quinn.rstanarmNB |>
    emmeans(~DENSITY|SEASON, type='link') |>
    pairs() |>
    gather_emmeans_draws() |> 
    mutate(Fit=exp(.value))
head(quinn.em)

g2 <- quinn.em |>
  group_by(contrast, SEASON) |>
  median_hdci() |>
  ggplot() +
  geom_vline(xintercept=1, linetype='dashed') +
  geom_pointrange(aes(x=Fit, y=SEASON, xmin=Fit.lower, xmax=Fit.upper)) + 
  scale_x_continuous('Effect size (High/Low)', trans = scales::log2_trans(), breaks=unique(as.vector(2^(0:4 %o% c(-1,1))))) +
  theme_classic()
g2

ggplot(quinn.em, aes(x=Fit)) +
    geom_histogram() +
    geom_vline(xintercept = 1, linetype='dashed') +
    scale_x_continuous('Effect size (High/Low)', trans = scales::log2_trans(), breaks=unique(as.vector(2^(0:4 %o% c(-1,1))))) +
    facet_wrap(SEASON~contrast, scales='free')
quinn.em |> group_by(contrast, SEASON) |> median_hdci(Fit)
# Probability of effect
quinn.em |> group_by(contrast,SEASON) |> summarize(P=mean(Fit>1))
##Probability of effect greater than 10%
quinn.em |> group_by(contrast,SEASON) |> summarize(P=mean(Fit>1.1))

## Using summarise_draws
quinn.rstanarmNB |>
    emmeans(~DENSITY|SEASON, type='link') |>
    pairs() |>
    tidy_draws() |>
    exp() |>
    summarise_draws(median,
                    HDInterval::hdi,
                    P = ~ mean(.x > 1)
                    )
```

### Via matrix multiplications

```{r mainEffects1c, results='markdown', eval=TRUE, mhidden=TRUE}
newdata <- with(quinn, expand.grid(SEASON = levels(SEASON),
                                  DENSITY = levels(DENSITY)))
Xmat<- model.matrix(~SEASON*DENSITY, data = newdata)
as.matrix(quinn.rstanarmNB) |> head()
## coefs <- as.matrix(quinn.rstanarmNB)
coefs <- as.matrix(as.data.frame(quinn.rstanarmNB) |>
                  dplyr:::select(-reciprocal_dispersion)) |>
    as.matrix()
fit <- exp(coefs %*% t(Xmat))
newdata <- newdata |>
    cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = 'HPDinterval'))
head(newdata)

ggplot(newdata, aes(y = estimate, x = SEASON, fill = DENSITY)) +
    geom_blank() +
    geom_line(aes(x=as.numeric(SEASON), ymin=conf.low, ymax=conf.high, linetype=DENSITY),
              position = position_dodge(0.2))+
    geom_pointrange(aes(ymin=conf.low, ymax=conf.high), shape=21,
                    position = position_dodge(0.2)) 

#Compare high and low in each season
#via contrasts
newdata <- with(quinn, expand.grid(SEASON = levels(SEASON),
                                   DENSITY = levels(DENSITY)))
## factor differences
Xmat<- model.matrix(~SEASON*DENSITY, data=newdata)
Xmat.high <- Xmat[newdata$DENSITY=="High",]
Xmat.low <- Xmat[newdata$DENSITY=="Low",]
Xmat.density <- Xmat.high-Xmat.low
rownames(Xmat.density) <- levels(quinn$SEASON)
coefs = as.matrix(as.data.frame(quinn.rstanarmNB) |> dplyr:::select(-reciprocal_dispersion))
fit = exp(coefs %*% t(Xmat.density))
tidyMCMC(fit, conf.int=TRUE, conf.method='HPDinterval')
## or absolute
fit.high = coefs %*% t(Xmat.high)
fit.low = coefs %*% t(Xmat.low)
fit = exp(fit.high) - exp(fit.low)
#fit = exp(fit.high - fit.low)
tidyMCMC(fit, conf.int=TRUE, conf.method='HPDinterval')
```
::::

## brms 
:::: {.panel-tabset}
### Simple
```{r mainEffects2a, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.brmsNB |>
    emmeans(~DENSITY|SEASON, type='response') |>
    pairs()
## absolute response scale
quinn.brmsNB |>
    emmeans(~DENSITY|SEASON, type='link') |>
    regrid() |>
    pairs()
```

### Using full posteriors

```{r mainEffects2b, results='markdown', eval=TRUE, mhidden=TRUE}
quinn.em <- quinn.brmsNB |>
    emmeans(~DENSITY|SEASON, type='link') |>
    pairs() |>
    gather_emmeans_draws() |> 
    mutate(Fit=exp(.value))
head(quinn.em)

g2 <- quinn.em |>
  group_by(contrast, SEASON) |>
  median_hdci() |>
  ggplot() +
  geom_vline(xintercept=1, linetype='dashed') +
  geom_pointrange(aes(x=Fit, y=SEASON, xmin=Fit.lower, xmax=Fit.upper)) + 
  scale_x_continuous('Effect size (High/Low)', trans = scales::log2_trans(), breaks=unique(as.vector(2^(0:4 %o% c(-1,1))))) +
  theme_classic()
g2

ggplot(quinn.em, aes(x=Fit)) +
    geom_histogram() +
    geom_vline(xintercept = 1, linetype='dashed') +
    scale_x_continuous('Effect size (High/Low)', trans = scales::log2_trans(), breaks=unique(as.vector(2^(0:4 %o% c(-1,1))))) +
    facet_wrap(SEASON~contrast, scales='free')
quinn.em |> group_by(contrast, SEASON) |> median_hdci(Fit)
# Probability of effect
quinn.em |> group_by(contrast,SEASON) |> summarize(P=mean(Fit>1))
##Probability of effect greater than 10%
quinn.em |> group_by(contrast,SEASON) |> summarize(P=mean(Fit>1.1))

```

::::
:::
<!-- END_PRIVATE-->
# Summary figures 

<!-- START_PRIVATE-->
::: {.panel-tabset}
## rmarkdown

```{r summaryFig1a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=4}
newdata <- quinn.rstanarmNB |>
    emmeans(~SEASON|DENSITY, type='response') |>
    as.data.frame()
head(newdata)
g1 <- ggplot(newdata, aes(y=prob, x=SEASON, color=DENSITY)) +
    geom_pointrange(aes(ymin=lower.HPD, ymax=upper.HPD),
                    position=position_dodge(width=0.2)) + 
    theme_classic()
g1 + g2
```

## brms

```{r summaryFig2a, results='markdown', eval=TRUE, mhidden=TRUE, fig.width=8, fig.height=4}
newdata <- quinn.brmsNB %>%
    emmeans(~SEASON|DENSITY, type='response') |>
    as.data.frame()
head(newdata)
g1 <- ggplot(newdata, aes(y=prob, x=SEASON, color=DENSITY)) +
    geom_pointrange(aes(ymin=lower.HPD, ymax=upper.HPD),
                    position=position_dodge(width=0.2)) + 
    theme_classic()
g1 + g2
```

:::
<!-- END_PRIVATE-->


<!-- START_PRIVATE-->
# Observation-level random effects 
## brms

```{r fitModel.brms, results='markdown', eval=TRUE, mhidden=TRUE}
quinn <- quinn |>
  group_by(SEASON, DENSITY) |>
  mutate(Obs = factor(1:n()))

quinn.form <- bf(RECRUITS ~ SEASON*DENSITY + (1|Obs),  family = poisson(link = 'log'))
get_prior(quinn.form,  data = quinn)

quinn.brmsU <- brm(quinn.form,
                   data = quinn,
                   refresh = 0,
                   chains = 3,
                   iter = 5000,
                   thin = 5,
                   warmup = 2000)

preds <- posterior_predict(quinn.brmsU,  nsamples=250,  summary=FALSE)
quinn.resids <- createDHARMa(simulatedResponse = t(preds),
                            observedResponse = quinn$RECRUITS,
                            fittedPredictedResponse = apply(preds, 2, median),
                            integerResponse = TRUE)
plot(quinn.resids)
newdata = emmeans(quinn.brmsU, ~SEASON|DENSITY, type='response') |> as.data.frame()
newdata
ggplot(newdata, aes(y=rate, x=SEASON, color=DENSITY)) +
    geom_pointrange(aes(ymin=lower.HPD, ymax=upper.HPD),
                    position=position_dodge(width=0.2))

```

<!-- END_PRIVATE-->
# References
